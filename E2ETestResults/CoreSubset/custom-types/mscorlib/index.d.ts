// Type definitions for @saltarelle-mscorlib
// Project: [LIBRARY URL]
// Definitions by: Justin Rockwood <jrockwood@github.com>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped

declare namespace ss {
  function isNullOrUndefined(o: any): boolean;
  function isValue(o: any): boolean;

  ///////////////////////////////////////////////////////////////////////////////
  // Object Extensions

  function keyExists(d: { [key: string]: any }, key: string): boolean;

  ///////////////////////////////////////////////////////////////////////////////
  // Type System Implementation

  function getInstanceType(instance: any): Function;

  ///////////////////////////////////////////////////////////////////////////////
  // IFormattable

  ///////////////////////////////////////////////////////////////////////////////
  // IComparable

  ///////////////////////////////////////////////////////////////////////////////
  // IEquatable

  ///////////////////////////////////////////////////////////////////////////////
  // Number Extensions

  ///////////////////////////////////////////////////////////////////////////////
  // String Extensions

  function isNullOrEmptyString(s: string): boolean;

  ///////////////////////////////////////////////////////////////////////////////
  // Math Extensions

  ///////////////////////////////////////////////////////////////////////////////
  // IFormatProvider

  ///////////////////////////////////////////////////////////////////////////////
  // NumberFormatInfo

  ///////////////////////////////////////////////////////////////////////////////
  // DateTimeFormatInfo

  ///////////////////////////////////////////////////////////////////////////////
  // Array Extensions

  ///////////////////////////////////////////////////////////////////////////////
  // Date Extensions

  ///////////////////////////////////////////////////////////////////////////////
  // Function Extensions

  ///////////////////////////////////////////////////////////////////////////////
  // RegExp Extensions

  ///////////////////////////////////////////////////////////////////////////////
  // Debug Extensions

  ///////////////////////////////////////////////////////////////////////////////
  // Enum

  ///////////////////////////////////////////////////////////////////////////////
  // CultureInfo

  ///////////////////////////////////////////////////////////////////////////////
  // IEnumerator

  ///////////////////////////////////////////////////////////////////////////////
  // IEnumerable

  ///////////////////////////////////////////////////////////////////////////////
  // ICollection

  function clear<T>(obj: T[]): void;
  function remove<T>(obj: T[], item: T): boolean;

  ///////////////////////////////////////////////////////////////////////////////
  // IEqualityComparer

  ///////////////////////////////////////////////////////////////////////////////
  // IComparer

  ///////////////////////////////////////////////////////////////////////////////
  // Nullable

  ///////////////////////////////////////////////////////////////////////////////
  // IList

  function indexOf<T>(obj: T[], item: T): number;

  ///////////////////////////////////////////////////////////////////////////////
  // IDictionary

  ///////////////////////////////////////////////////////////////////////////////
  // Int32

  ///////////////////////////////////////////////////////////////////////////////
  // MutableDateTime

  ///////////////////////////////////////////////////////////////////////////////
  // ArrayEnumerator

  ///////////////////////////////////////////////////////////////////////////////
  // ObjectEnumerator

  ///////////////////////////////////////////////////////////////////////////////
  // EqualityComparer

  ///////////////////////////////////////////////////////////////////////////////
  // Comparer

  ///////////////////////////////////////////////////////////////////////////////
  // IDisposable

  ///////////////////////////////////////////////////////////////////////////////
  // StringBuilder

  ///////////////////////////////////////////////////////////////////////////////
  // Random

  ///////////////////////////////////////////////////////////////////////////////
  // EventArgs

  ///////////////////////////////////////////////////////////////////////////////
  // Exception

  ////////////////////////////////////////////////////////////////////////////////
  // NotImplementedException

  ////////////////////////////////////////////////////////////////////////////////
  // NotSupportedException

  ////////////////////////////////////////////////////////////////////////////////
  // AggregateException

  ////////////////////////////////////////////////////////////////////////////////
  // PromiseException

  ////////////////////////////////////////////////////////////////////////////////
  // JsErrorException

  ////////////////////////////////////////////////////////////////////////////////
  // ArgumentException

  ////////////////////////////////////////////////////////////////////////////////
  // ArgumentNullException

  ////////////////////////////////////////////////////////////////////////////////
  // ArgumentOutOfRangeException

  ////////////////////////////////////////////////////////////////////////////////
  // FormatException

  ////////////////////////////////////////////////////////////////////////////////
  // DivideByZeroException

  ////////////////////////////////////////////////////////////////////////////////
  // InvalidCastException

  ////////////////////////////////////////////////////////////////////////////////
  // InvalidOperationException

  ////////////////////////////////////////////////////////////////////////////////
  // NullReferenceException

  ////////////////////////////////////////////////////////////////////////////////
  // KeyNotFoundException

  ////////////////////////////////////////////////////////////////////////////////
  // AmbiguousMatchException

  ///////////////////////////////////////////////////////////////////////////////
  // IteratorBlockEnumerable

  ///////////////////////////////////////////////////////////////////////////////
  // IteratorBlockEnumerator

  ///////////////////////////////////////////////////////////////////////////////
  // Lazy

  ///////////////////////////////////////////////////////////////////////////////
  // Task

  ////////////////////////////////////////////////////////////////////////////////
  // TaskStatus

  ///////////////////////////////////////////////////////////////////////////////
  // TaskCompletionSource

  ///////////////////////////////////////////////////////////////////////////////
  // CancelEventArgs
}
