<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="TsAstNodeGenerator.ttinclude" #>
<#
var nodes = GatherTriviaDefinitions();
string outputFileName = Path.ChangeExtension(TemplateFileName, ".cs");
#>
// ---------------------------------------------------------------------------------------------------------------------
// <copyright file="<#= outputFileName #>" company="Justin Rockwood">
//   Copyright (c) Justin Rockwood. All Rights Reserved. Licensed under the Apache License, Version 2.0. See
//   LICENSE.txt in the project root for license information.
// </copyright>
// <auto-generated/>
// ---------------------------------------------------------------------------------------------------------------------

// DO NOT HAND-MODIFY. This is auto-generated code from the template file '<#= TemplateFileName #>'.
// ReSharper disable ArrangeMethodOrOperatorBody
// ReSharper disable CheckNamespace
// ReSharper disable CompareOfFloatsByEqualityOperator
// ReSharper disable RedundantUsingDirective
// ReSharper disable UnusedMember.Global
// ReSharper disable UnusedMember.Local

#nullable enable

namespace Desalt.TypeScriptAst.Ast
{
    using System;
    using System.Collections.Immutable;
    using Desalt.TypeScriptAst.Emit;
<#
foreach (var node in nodes) {
#>

    //// ===============================================================================================================
    //// <#= node.Name #>
    //// ===============================================================================================================

    /// <summary>
    /// <#= node.Comment #>
    /// </summary>
    public interface <#= node.InterfaceName #> : <#= node.BaseInterfaces #>
    {
<# WriteProperties(node, isInterface: true); #>
    }

    /// <summary>
    /// <#= node.Comment #>
    /// </summary>
    internal partial class <#= node.ClassName #> : <#= node.BaseClassName #>, <#= node.InterfaceName #>
    {
        public <#= node.ClassName #>(<#= node.ConstructorParameters #>)
            : base(preserveSpacing)
        {
<# WriteCtorAssignments(node, skipVerifyInputs: true); #>
        }
<# WriteProperties(node, isInterface: false); #>

        public override void Emit(Emitter emitter) => <#= node.EmitImplementation #>;
    }
<# WriteWithExtensionMethods(node); #>
<#
} // end foreach node
#>
}
