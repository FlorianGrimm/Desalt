
// ---------------------------------------------------------------------------------------------------------------------
// <copyright file="TsVisitor.cs" company="Justin Rockwood">
//   Copyright (c) Justin Rockwood. All Rights Reserved. Licensed under the Apache License, Version 2.0. See
//   LICENSE.txt in the project root for license information.
// </copyright>
// <auto-generated/>
// ---------------------------------------------------------------------------------------------------------------------

// DO NOT HAND-MODIFY. This is auto-generated code from the template file 'TsVisitor.tt'.
// ReSharper disable ArrangeMethodOrOperatorBody
// ReSharper disable CheckNamespace

#nullable enable

namespace Desalt.TypeScriptAst.Ast
{
    /// <summary>
    /// Represents an <see cref="ITsAstNode"/> visitor that visits only the single node passed into its Visit method.
    /// </summary>
    public abstract partial class TsVisitor
    {
        public virtual void Visit(ITsAstNode node)
        {
            node?.Accept(this);
        }

        /// <summary>
        /// Visits a TypeScript identifier.
        /// </summary>
        public virtual void VisitIdentifier(ITsIdentifier node) => Visit(node);

        /// <summary>
        /// Visits the 'this' expression.
        /// </summary>
        public virtual void VisitThis(ITsThis node) => Visit(node);

        /// <summary>
        /// Visits a parenthesized expression, of the form '(expression)'.
        /// </summary>
        public virtual void VisitParenthesizedExpression(ITsParenthesizedExpression node) => Visit(node);

        /// <summary>
        /// Visits the 'null' literal expression.
        /// </summary>
        public virtual void VisitNullLiteral(ITsNullLiteral node) => Visit(node);

        /// <summary>
        /// Visits a boolean literal expression (either 'true' or 'false').
        /// </summary>
        public virtual void VisitBooleanLiteral(ITsBooleanLiteral node) => Visit(node);

        /// <summary>
        /// Visits an expression containing a numeric literal value.
        /// </summary>
        public virtual void VisitNumericLiteral(ITsNumericLiteral node) => Visit(node);

        /// <summary>
        /// Visits a string literal of the form 'string' or "string".
        /// </summary>
        public virtual void VisitStringLiteral(ITsStringLiteral node) => Visit(node);

        /// <summary>
        /// Visits a regular expression literal of the form '/body/flags'.
        /// </summary>
        public virtual void VisitRegularExpressionLiteral(ITsRegularExpressionLiteral node) => Visit(node);

        /// <summary>
        /// Visits an array literal of the form '[element...]'.
        /// </summary>
        public virtual void VisitArrayLiteral(ITsArrayLiteral node) => Visit(node);

        /// <summary>
        /// Visits an element in an array.
        /// </summary>
        public virtual void VisitArrayElement(ITsArrayElement node) => Visit(node);

        /// <summary>
        /// Visits on object literal of the form '{ PropertyDefinition... }'.
        /// </summary>
        public virtual void VisitObjectLiteral(ITsObjectLiteral node) => Visit(node);

        /// <summary>
        /// Visits an element in an object initializer of the form 'identifier = expression'.
        /// </summary>
        public virtual void VisitCoverInitializedName(ITsCoverInitializedName node) => Visit(node);

        /// <summary>
        /// Visits a property assignment within an object literal of the form 'propertyName: initializer'.
        /// </summary>
        public virtual void VisitPropertyAssignment(ITsPropertyAssignment node) => Visit(node);

        /// <summary>
        /// Visits a property name inside of an object of the form '[ expression ]'.
        /// </summary>
        public virtual void VisitComputedPropertyName(ITsComputedPropertyName node) => Visit(node);

        /// <summary>
        /// Visits a part within a template string literal.
        /// </summary>
        public virtual void VisitTemplatePart(ITsTemplatePart node) => Visit(node);

        /// <summary>
        /// Visits a template string literal.
        /// </summary>
        public virtual void VisitTemplateLiteral(ITsTemplateLiteral node) => Visit(node);

        /// <summary>
        /// Visits a member expression of the form 'expression[expression]'.
        /// </summary>
        public virtual void VisitMemberBracketExpression(ITsMemberBracketExpression node) => Visit(node);

        /// <summary>
        /// Visits a member expression of the form 'expression.name'.
        /// </summary>
        public virtual void VisitMemberDotExpression(ITsMemberDotExpression node) => Visit(node);

        /// <summary>
        /// Visits a member expression of the form 'super[expression]'.
        /// </summary>
        public virtual void VisitSuperBracketExpression(ITsSuperBracketExpression node) => Visit(node);

        /// <summary>
        /// Visits a member expression of the form 'super.name'.
        /// </summary>
        public virtual void VisitSuperDotExpression(ITsSuperDotExpression node) => Visit(node);

        /// <summary>
        /// Visits an expression of the form 'new.target'.
        /// </summary>
        public virtual void VisitNewTargetExpression(ITsNewTargetExpression node) => Visit(node);

        /// <summary>
        /// Visits a call expression of the form 'expression(arguments)'.
        /// </summary>
        public virtual void VisitCallExpression(ITsCallExpression node) => Visit(node);

        /// <summary>
        /// Visits a call expression of the form 'new expression(arguments)'.
        /// </summary>
        public virtual void VisitNewCallExpression(ITsNewCallExpression node) => Visit(node);

        /// <summary>
        /// Visits a call expression of the form 'super(arguments)'.
        /// </summary>
        public virtual void VisitSuperCallExpression(ITsSuperCallExpression node) => Visit(node);

        /// <summary>
        /// Visits an argument list of the form '&lt;T&gt;(x: type, y: type).
        /// </summary>
        public virtual void VisitArgumentList(ITsArgumentList node) => Visit(node);

        /// <summary>
        /// Visits an argument within an <see cref="ITsArgumentList" />.
        /// </summary>
        public virtual void VisitArgument(ITsArgument node) => Visit(node);

        /// <summary>
        /// Visits a unary expression.
        /// </summary>
        public virtual void VisitUnaryExpression(ITsUnaryExpression node) => Visit(node);

        /// <summary>
        /// Visits a unary cast expression of the form, '&lt;Type&gt;expression'.
        /// </summary>
        public virtual void VisitCastExpression(ITsCastExpression node) => Visit(node);

        /// <summary>
        /// Visits a binary expression.
        /// </summary>
        public virtual void VisitBinaryExpression(ITsBinaryExpression node) => Visit(node);

        /// <summary>
        /// Visits a conditional expression of the form 'x ? y : z'.
        /// </summary>
        public virtual void VisitConditionalExpression(ITsConditionalExpression node) => Visit(node);

        /// <summary>
        /// Visits an assignment of the form 'left == right'.
        /// </summary>
        public virtual void VisitAssignmentExpression(ITsAssignmentExpression node) => Visit(node);

        /// <summary>
        /// Visits an expression list separated by commas. Useful in for loops for the initializer or incrementor, for example.
        /// </summary>
        public virtual void VisitCommaExpression(ITsCommaExpression node) => Visit(node);

        /// <summary>
        /// Visits a block statement of the form '{ statements }'.
        /// </summary>
        public virtual void VisitBlockStatement(ITsBlockStatement node) => Visit(node);

        /// <summary>
        /// Visits a lexical declaration of the form 'const|let x: type, y: type = z;'.
        /// </summary>
        public virtual void VisitLexicalDeclaration(ITsLexicalDeclaration node) => Visit(node);

        /// <summary>
        /// Visits a variable declaration statement of the form 'var x = y;'.
        /// </summary>
        public virtual void VisitVariableStatement(ITsVariableStatement node) => Visit(node);

        /// <summary>
        /// Visits an object binding pattern of the form '{propName = defaultValue, propName: otherPropName}'.
        /// </summary>
        public virtual void VisitObjectBindingPattern(ITsObjectBindingPattern node) => Visit(node);

        /// <summary>
        /// Visits an array binding pattern of the form '[x = y, z]' or '[x = y, z, ...p]'.
        /// </summary>
        public virtual void VisitArrayBindingPattern(ITsArrayBindingPattern node) => Visit(node);

        /// <summary>
        /// Visits a single name binding pattern used in object and array bindings, of the form 'name = expression'.
        /// </summary>
        public virtual void VisitSingleNameBinding(ITsSingleNameBinding node) => Visit(node);

        /// <summary>
        /// Visits a property name binding pattern used in object and array bindings, of the form 'propertyName = expression'.
        /// </summary>
        public virtual void VisitPropertyNameBinding(ITsPropertyNameBinding node) => Visit(node);

        /// <summary>
        /// Visits a recursive pattern binding in an object or array binding.
        /// </summary>
        public virtual void VisitPatternBinding(ITsPatternBinding node) => Visit(node);

        /// <summary>
        /// Visits an empty statement.
        /// </summary>
        public virtual void VisitEmptyStatement(ITsEmptyStatement node) => Visit(node);

        /// <summary>
        /// Visits an expression in statement form.
        /// </summary>
        public virtual void VisitExpressionStatement(ITsExpressionStatement node) => Visit(node);

        /// <summary>
        /// Visits an 'if' statement of the form 'if (expression) statement else statement'.
        /// </summary>
        public virtual void VisitIfStatement(ITsIfStatement node) => Visit(node);

        /// <summary>
        /// Visits a do/while statement.
        /// </summary>
        public virtual void VisitDoWhileStatement(ITsDoWhileStatement node) => Visit(node);

        /// <summary>
        /// Visits a while loop.
        /// </summary>
        public virtual void VisitWhileStatement(ITsWhileStatement node) => Visit(node);

        /// <summary>
        /// Visits a 'for' loop.
        /// </summary>
        public virtual void VisitForStatement(ITsForStatement node) => Visit(node);

        /// <summary>
        /// Visits a for-in loop of the form 'for (const x: type in expression) statement'.
        /// </summary>
        public virtual void VisitForInStatement(ITsForInStatement node) => Visit(node);

        /// <summary>
        /// Visits a for-of loop of the form 'for (const x: type of expression) statement'.
        /// </summary>
        public virtual void VisitForOfStatement(ITsForOfStatement node) => Visit(node);

        /// <summary>
        /// Visits a continue statement of the form, 'continue [label]'.
        /// </summary>
        public virtual void VisitContinueStatement(ITsContinueStatement node) => Visit(node);

        /// <summary>
        /// Visits a break statement of the form, 'break [label]'.
        /// </summary>
        public virtual void VisitBreakStatement(ITsBreakStatement node) => Visit(node);

        /// <summary>
        /// Visits a 'return' statement.
        /// </summary>
        public virtual void VisitReturnStatement(ITsReturnStatement node) => Visit(node);

        /// <summary>
        /// Visits a 'with' statement of the form, 'with (expression) statement'.
        /// </summary>
        public virtual void VisitWithStatement(ITsWithStatement node) => Visit(node);

        /// <summary>
        /// Visits a switch statement of the form 'switch (condition) { case x: statement; default: statement; }'.
        /// </summary>
        public virtual void VisitSwitchStatement(ITsSwitchStatement node) => Visit(node);

        /// <summary>
        /// Visits a 'case' clause within a 'switch' statement of the form 'case expression: statements'.
        /// </summary>
        public virtual void VisitCaseClause(ITsCaseClause node) => Visit(node);

        /// <summary>
        /// Visits a 'default' clause within a 'switch' statement of the form 'default: statements'.
        /// </summary>
        public virtual void VisitDefaultClause(ITsDefaultClause node) => Visit(node);

        /// <summary>
        /// Visits a labeled statement.
        /// </summary>
        public virtual void VisitLabeledStatement(ITsLabeledStatement node) => Visit(node);

        /// <summary>
        /// Visits a 'throw' statement.
        /// </summary>
        public virtual void VisitThrowStatement(ITsThrowStatement node) => Visit(node);

        /// <summary>
        /// Visits a try/catch/finally statement.
        /// </summary>
        public virtual void VisitTryStatement(ITsTryStatement node) => Visit(node);

        /// <summary>
        /// Visits a 'debugger' statement.
        /// </summary>
        public virtual void VisitDebuggerStatement(ITsDebuggerStatement node) => Visit(node);

        /// <summary>
        /// Visits an arrow function expression of the form '() => body'.
        /// </summary>
        public virtual void VisitArrowFunction(ITsArrowFunction node) => Visit(node);

        /// <summary>
        /// Visits a class declaration acting as an expression.
        /// </summary>
        public virtual void VisitClassExpression(ITsClassExpression node) => Visit(node);

        /// <summary>
        /// Visits an import declaration of the form 'import ImportClause FromClause;' or 'import Module;'.
        /// </summary>
        public virtual void VisitImportDeclaration(ITsImportDeclaration node) => Visit(node);

        /// <summary>
        /// Visits an import clause of the form 'identifier', '* as identifier', '{ importSpecifier, ... }', 'identifier, * as identifier', or 'identifier, { importSpecifier, ... }'.
        /// </summary>
        public virtual void VisitImportClause(ITsImportClause node) => Visit(node);

        /// <summary>
        /// Visits a from clause in an import or export statement, of the form 'from moduleName'.
        /// </summary>
        public virtual void VisitFromClause(ITsFromClause node) => Visit(node);

        /// <summary>
        /// Visits an import specifier, which is either an identifier or 'identifier as identifier'.
        /// </summary>
        public virtual void VisitImportSpecifier(ITsImportSpecifier node) => Visit(node);

        /// <summary>
        /// Visits a list of type parameters of the form '&lt;type, type&gt;'.
        /// </summary>
        public virtual void VisitTypeParameters(ITsTypeParameters node) => Visit(node);

        /// <summary>
        /// Visits a TypeScript type parameter, for example &lt;MyType extends MyBase&gt;.
        /// </summary>
        public virtual void VisitTypeParameter(ITsTypeParameter node) => Visit(node);

        /// <summary>
        /// Visits a parenthesized type, of the form '(Type)'.
        /// </summary>
        public virtual void VisitParenthesizedType(ITsParenthesizedType node) => Visit(node);

        /// <summary>
        /// Visits one of the predefined types: any, number, boolean, string, symbol, void.
        /// </summary>
        public virtual void VisitPredefinedType(ITsPredefinedType node) => Visit(node);

        /// <summary>
        /// Visits a TypeScript type reference.
        /// </summary>
        public virtual void VisitTypeReference(ITsTypeReference node) => Visit(node);

        /// <summary>
        /// Visits a qualified name, which has dots between identifiers. For example, 'ns.type.method'.
        /// </summary>
        public virtual void VisitQualifiedName(ITsQualifiedName node) => Visit(node);

        /// <summary>
        /// Visits a qualified name with type arguments. For example, 'ns.type.method&lt;T1, T2&gt;'.
        /// </summary>
        public virtual void VisitGenericTypeName(ITsGenericTypeName node) => Visit(node);

        /// <summary>
        /// Visits a TypeScript object type.
        /// </summary>
        public virtual void VisitObjectType(ITsObjectType node) => Visit(node);

        /// <summary>
        /// Visits a TypeScript array type.
        /// </summary>
        public virtual void VisitArrayType(ITsArrayType node) => Visit(node);

        /// <summary>
        /// Visits a TypeScript tuple type.
        /// </summary>
        public virtual void VisitTupleType(ITsTupleType node) => Visit(node);

        /// <summary>
        /// Visits a union type of the form 'type1 | type2'.
        /// </summary>
        public virtual void VisitUnionType(ITsUnionType node) => Visit(node);

        /// <summary>
        /// Visits an intersection type of the form 'type1 &amp; type2'.
        /// </summary>
        public virtual void VisitIntersectionType(ITsIntersectionType node) => Visit(node);

        /// <summary>
        /// Visits a TypeScript function type.
        /// </summary>
        public virtual void VisitFunctionType(ITsFunctionType node) => Visit(node);

        /// <summary>
        /// Visits a TypeScript constructor type.
        /// </summary>
        public virtual void VisitConstructorType(ITsConstructorType node) => Visit(node);

        /// <summary>
        /// Visits a 'typeof' query.
        /// </summary>
        public virtual void VisitTypeQuery(ITsTypeQuery node) => Visit(node);

        /// <summary>
        /// Visits the 'this' type.
        /// </summary>
        public virtual void VisitThisType(ITsThisType node) => Visit(node);

        /// <summary>
        /// Visits a property signature.
        /// </summary>
        public virtual void VisitPropertySignature(ITsPropertySignature node) => Visit(node);

        /// <summary>
        /// Visits a call signature of the form '&gt;T&lt;(parameter: type): type'.
        /// </summary>
        public virtual void VisitCallSignature(ITsCallSignature node) => Visit(node);

        /// <summary>
        /// Visits a parameter list of the form '(parameter: type)'.
        /// </summary>
        public virtual void VisitParameterList(ITsParameterList node) => Visit(node);

        /// <summary>
        /// Visits a bound required parameter in a parameter list for a function.
        /// </summary>
        public virtual void VisitBoundRequiredParameter(ITsBoundRequiredParameter node) => Visit(node);

        /// <summary>
        /// Visits a required function parameter in the form <c>parameterName: 'stringLiteral'</c>.
        /// </summary>
        public virtual void VisitStringRequiredParameter(ITsStringRequiredParameter node) => Visit(node);

        /// <summary>
        /// Visits a bound optional parameter in a parameter list for a function.
        /// </summary>
        public virtual void VisitBoundOptionalParameter(ITsBoundOptionalParameter node) => Visit(node);

        /// <summary>
        /// Visits an optional function parameter in the form <c>parameterName: 'stringLiteral'</c>.
        /// </summary>
        public virtual void VisitStringOptionalParameter(ITsStringOptionalParameter node) => Visit(node);

        /// <summary>
        /// Visits a function parameter of the form '... parameterName: type'.
        /// </summary>
        public virtual void VisitRestParameter(ITsRestParameter node) => Visit(node);

        /// <summary>
        /// Visits a constructor method signature of the form 'new &lt;T&gt;(parameter: type): type'.
        /// </summary>
        public virtual void VisitConstructSignature(ITsConstructSignature node) => Visit(node);

        /// <summary>
        /// Visits an index signature of the form '[parameterName: string|number]: type'.
        /// </summary>
        public virtual void VisitIndexSignature(ITsIndexSignature node) => Visit(node);

        /// <summary>
        /// Visits a method signature, which is a shorthand for declaring a property of a function type.
        /// </summary>
        public virtual void VisitMethodSignature(ITsMethodSignature node) => Visit(node);

        /// <summary>
        /// Visits a type alias of the form 'type alias&lt;T&gt; = type'.
        /// </summary>
        public virtual void VisitTypeAliasDeclaration(ITsTypeAliasDeclaration node) => Visit(node);

        /// <summary>
        /// Visits an object literal property function.
        /// </summary>
        public virtual void VisitPropertyFunction(ITsPropertyFunction node) => Visit(node);

        /// <summary>
        /// Visits a property get accessor of the form 'get name (): type { body }'.
        /// </summary>
        public virtual void VisitGetAccessor(ITsGetAccessor node) => Visit(node);

        /// <summary>
        /// Visits a property set accessor of the form 'set name(value: type) { body }'.
        /// </summary>
        public virtual void VisitSetAccessor(ITsSetAccessor node) => Visit(node);

        /// <summary>
        /// Visits a function declaration acting as an expression.
        /// </summary>
        public virtual void VisitFunctionExpression(ITsFunctionExpression node) => Visit(node);

        /// <summary>
        /// Visits a simple variable declaration of the form 'x: type = y'.
        /// </summary>
        public virtual void VisitSimpleVariableDeclaration(ITsSimpleVariableDeclaration node) => Visit(node);

        /// <summary>
        /// Visits a destructuring variable declaration of the form '{x, y}: type = foo' or '[x, y]:type = foo'.
        /// </summary>
        public virtual void VisitDestructuringVariableDeclaration(ITsDestructuringVariableDeclaration node) => Visit(node);

        /// <summary>
        /// Visits a simple lexical binding of the form 'x: type = y'.
        /// </summary>
        public virtual void VisitSimpleLexicalBinding(ITsSimpleLexicalBinding node) => Visit(node);

        /// <summary>
        /// Visits a destructuring lexical binding of the form '{x, y}: type = foo' or '[x, y]:type = foo'.
        /// </summary>
        public virtual void VisitDestructuringLexicalBinding(ITsDestructuringLexicalBinding node) => Visit(node);

        /// <summary>
        /// Visits a function declaration of the form 'function [name] signature { body }'.
        /// </summary>
        public virtual void VisitFunctionDeclaration(ITsFunctionDeclaration node) => Visit(node);

        /// <summary>
        /// Visits an interface declaration.
        /// </summary>
        public virtual void VisitInterfaceDeclaration(ITsInterfaceDeclaration node) => Visit(node);

        /// <summary>
        /// Visits a class declaration.
        /// </summary>
        public virtual void VisitClassDeclaration(ITsClassDeclaration node) => Visit(node);

        /// <summary>
        /// Visits a class heritage of the form ' extends type implements type, type'.
        /// </summary>
        public virtual void VisitClassHeritage(ITsClassHeritage node) => Visit(node);

        /// <summary>
        /// Visits a constructor declaration in a class.
        /// </summary>
        public virtual void VisitConstructorDeclaration(ITsConstructorDeclaration node) => Visit(node);

        /// <summary>
        /// Visits a member variable declaration in a class.
        /// </summary>
        public virtual void VisitMemberVariableDeclaration(ITsMemberVariableDeclaration node) => Visit(node);

        /// <summary>
        /// Visits a member function declaration in a class.
        /// </summary>
        public virtual void VisitMemberFunctionDeclaration(ITsMemberFunctionDeclaration node) => Visit(node);

        /// <summary>
        /// Visits a 'get' member accessor declaration in a class.
        /// </summary>
        public virtual void VisitMemberGetAccessorDeclaration(ITsMemberGetAccessorDeclaration node) => Visit(node);

        /// <summary>
        /// Visits a 'set' member accessor declaration in a class.
        /// </summary>
        public virtual void VisitMemberSetAccessorDeclaration(ITsMemberSetAccessorDeclaration node) => Visit(node);

        /// <summary>
        /// Visits an index member declaration in a class.
        /// </summary>
        public virtual void VisitIndexMemberDeclaration(ITsIndexMemberDeclaration node) => Visit(node);

        /// <summary>
        /// Visits an enum declaration.
        /// </summary>
        public virtual void VisitEnumDeclaration(ITsEnumDeclaration node) => Visit(node);

        /// <summary>
        /// Visits an enum member of the form, 'name = value'.
        /// </summary>
        public virtual void VisitEnumMember(ITsEnumMember node) => Visit(node);

        /// <summary>
        /// Visits a namespace declaration.
        /// </summary>
        public virtual void VisitNamespaceDeclaration(ITsNamespaceDeclaration node) => Visit(node);

        /// <summary>
        /// Visits an exported variable statement.
        /// </summary>
        public virtual void VisitExportedVariableStatement(ITsExportedVariableStatement node) => Visit(node);

        /// <summary>
        /// Visits an exported declaration.
        /// </summary>
        public virtual void VisitExportedDeclaration(ITsExportedDeclaration node) => Visit(node);

        /// <summary>
        /// Visits an import alias declaration of the form, 'import alias = dotted.name'.
        /// </summary>
        public virtual void VisitImportAliasDeclaration(ITsImportAliasDeclaration node) => Visit(node);

        /// <summary>
        /// Visits a TypeScript implementation source file (extension '.ts'), containing statements and declarations.
        /// </summary>
        public virtual void VisitImplementationScript(ITsImplementationScript node) => Visit(node);

        /// <summary>
        /// Visits a TypeScript implementation source file (extension '.ts'), containing exported statements and declarations.
        /// </summary>
        public virtual void VisitImplementationModule(ITsImplementationModule node) => Visit(node);

        /// <summary>
        /// Visits an import declaration using 'require', of the form 'import name = require(string);'.
        /// </summary>
        public virtual void VisitImportRequireDeclaration(ITsImportRequireDeclaration node) => Visit(node);

        /// <summary>
        /// Visits an exported element in a module file.
        /// </summary>
        public virtual void VisitExportImplementationElement(ITsExportImplementationElement node) => Visit(node);

        /// <summary>
        /// Visits an ambient declaration of the form 'declare element'.
        /// </summary>
        public virtual void VisitAmbientDeclaration(ITsAmbientDeclaration node) => Visit(node);

        /// <summary>
        /// Visits an ambient variable declaration of the form, 'var|let|const x, y: type;'.
        /// </summary>
        public virtual void VisitAmbientVariableDeclaration(ITsAmbientVariableDeclaration node) => Visit(node);

        /// <summary>
        /// Visits an ambient variable binding of the form 'name: type'.
        /// </summary>
        public virtual void VisitAmbientBinding(ITsAmbientBinding node) => Visit(node);

        /// <summary>
        /// Visits an ambient function declaration of the form 'function name signature;'.
        /// </summary>
        public virtual void VisitAmbientFunctionDeclaration(ITsAmbientFunctionDeclaration node) => Visit(node);

        /// <summary>
        /// Visits an ambient class declaration.
        /// </summary>
        public virtual void VisitAmbientClassDeclaration(ITsAmbientClassDeclaration node) => Visit(node);

        /// <summary>
        /// Visits a constructor declaration within an ambient class declaration.
        /// </summary>
        public virtual void VisitAmbientConstructorDeclaration(ITsAmbientConstructorDeclaration node) => Visit(node);

        /// <summary>
        /// Visits a variable declaration within an ambient class declaration.
        /// </summary>
        public virtual void VisitAmbientMemberVariableDeclaration(ITsAmbientMemberVariableDeclaration node) => Visit(node);

        /// <summary>
        /// Visits a function declaration within an ambient class declaration.
        /// </summary>
        public virtual void VisitAmbientMemberFunctionDeclaration(ITsAmbientMemberFunctionDeclaration node) => Visit(node);

        /// <summary>
        /// Visits an ambient namespace declaration.
        /// </summary>
        public virtual void VisitAmbientNamespaceDeclaration(ITsAmbientNamespaceDeclaration node) => Visit(node);

        /// <summary>
        /// Visits an element in an ambient namespace declaration.
        /// </summary>
        public virtual void VisitAmbientNamespaceElement(ITsAmbientNamespaceElement node) => Visit(node);
    }
}
