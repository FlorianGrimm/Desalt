<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="TsAstNodeGenerator.ttinclude" #>
<#
var allNodes = GatherAstDefinitions().OrderBy(x => x.InterfaceName);
string templateFileWithoutExtension = Path.GetFileNameWithoutExtension(TemplateFileName);

var expressions = allNodes
    // Put ITsExpression first.
    .Where(x => x.InterfaceName == "ITsExpression")
    .Concat(allNodes.Where(x => x.BaseInterfaceList.Contains("ITsExpression")));

var statements = allNodes
    // Put ITsStatement first.
    .Where(x => x.InterfaceName == "ITsStatement")
    .Concat(allNodes.Where(x => x.BaseInterfaceList.Contains("ITsStatement")))
    .Except(expressions);

var rootDeclarationInterfaces = allNodes.Where(
    x => x.InterfaceName == "ITsAmbientClassBodyElement" ||
    x.InterfaceName == "ITsAmbientDeclarationElement" ||
    x.InterfaceName == "ITsClassElement" ||
    x.InterfaceName == "ITsNamespaceElement" ||
    x.InterfaceName == "ITsVariableDeclaration");

var declarations = allNodes
    // Put these first.
    .Where(x => x.InterfaceName == "ITsDeclaration")
    .Concat(rootDeclarationInterfaces)
    // And include anything that has these items in their base interface list (but not the ones we already included).
    .Concat(
        allNodes.Where(x => x.BaseInterfaceList.Contains("ITsDeclaration") ||
            x.BaseInterfaceList.Contains("ITsVariableDeclaration") ||
            x.BaseInterfaceList.Contains("ITsClassElement") ||
            x.BaseInterfaceList.Contains("ITsEnumMember") ||
            x.BaseInterfaceList.Contains("ITsNamespaceElement") ||
            x.BaseInterfaceList.Contains("ITsAmbientDeclarationElement") ||
            x.BaseInterfaceList.Contains("ITsAmbientClassBodyElement"))
        .Except(rootDeclarationInterfaces)
        .Except(allNodes.Where(x => x.InterfaceName == "ITsDeclaration")))
    .Except(expressions.Concat(statements));

var types = allNodes
    // Put ITsType and ITsTypeMember first.
    .Where(x => x.InterfaceName == "ITsType")
    .Concat(allNodes.Where(x => x.InterfaceName == "ITsTypeMember"))
    .Concat(allNodes.Where(x => x.BaseInterfaceList.Contains("ITsType") || x.BaseInterfaceList.Contains("ITsTypeMember")))
    .Except(declarations);

var others = allNodes.Except(expressions.Concat(statements).Concat(declarations).Concat(types));

for (int i = 0; i < 5; i++)
{
    var fileName = templateFileWithoutExtension + (i switch
    {
        0 => ".Others.cs",
        1 => ".Expressions.cs",
        2 => ".Statements.cs",
        3 => ".Declarations.cs",
        4 => ".Types.cs",
        _ => throw new InvalidOperationException(),
    });

    var nodes = i switch
    {
        0 => others,
        1 => expressions,
        2 => statements,
        3 => declarations,
        4 => types,
        _ => throw new InvalidOperationException(),
    };
#>
// ---------------------------------------------------------------------------------------------------------------------
// <copyright file="<#= fileName #>" company="Justin Rockwood">
//   Copyright (c) Justin Rockwood. All Rights Reserved. Licensed under the Apache License, Version 2.0. See
//   LICENSE.txt in the project root for license information.
// </copyright>
// <auto-generated/>
// ---------------------------------------------------------------------------------------------------------------------

// DO NOT HAND-MODIFY. This is auto-generated code from the template file '<#= TemplateFileName #>'.
// ReSharper disable ArrangeMethodOrOperatorBody
// ReSharper disable CheckNamespace
// ReSharper disable CompareOfFloatsByEqualityOperator
// ReSharper disable RedundantUsingDirective
// ReSharper disable UnusedMember.Global
// ReSharper disable UnusedMember.Local

#nullable enable

// ---------------------------------------------------------------------------------------------------------------------
// References:
// * Ecma-262 6.0 (ES 2015) Grammar (http://www.ecma-international.org/ecma-262/6.0/)
// ---------------------------------------------------------------------------------------------------------------------

// ---------------------------------------------------------------------------------------------------------------------
// TypeScript Grammar, version 1.8 (Jan 2016)
// ==========================================
// See https://github.com/Microsoft/TypeScript/blob/master/doc/spec.md
// 
// The TypeScript grammar is a superset of the grammar defined in the ECMAScript 2015 Language
// Specification (specifically, the ECMA-262 Standard, 6th Edition) and this appendix lists only
// productions that are new or modified from the ECMAScript grammar.
// 
// See http://www.ecma-international.org/ecma-262/6.0/ for the ES2015 grammar.
// 
// Many of these interface names and shapes are taken from the TypeScript source code at:
// https://github.com/Microsoft/TypeScript/blob/master/src/compiler/types.ts.
// 
// There is also an Antlr grammar defined here:
// https://raw.githubusercontent.com/antlr/grammars-v4/master/typescript/TypeScriptParser.g4
// ---------------------------------------------------------------------------------------------------------------------

namespace Desalt.TypeScriptAst.Ast
{
    using System;
    using System.Collections.Immutable;
    using Desalt.TypeScriptAst.Emit;
<#
foreach (var node in nodes) {
#>

    //// ===============================================================================================================
    //// <#= node.Name #>
    //// ===============================================================================================================

<# WriteEnumDeclarations(node); #>
    /// <summary>
    /// <#= node.Comment #>
    /// </summary>
    public interface <#= node.InterfaceName #> : <#= node.BaseInterfaces #>
    {
<# WriteProperties(node, isInterface: true); #>
    }
<# if (!node.IsInterfaceOnly) { #>

    /// <summary>
    /// <#= node.Comment #>
    /// </summary>
    internal partial class <#= node.ClassName #> : <#= node.BaseClassName #>, <#= node.InterfaceName #>
    {
        public <#= node.ClassName #>(<#= node.ConstructorParameters #>)
            : base(leadingTrivia, trailingTrivia)
        {
<# WriteCtorAssignments(node); #>
        }
<# WriteProperties(node, isInterface: false); #>

        partial void VerifyInputs(<#= node.ToPropertyList() #>);
        public override void Accept(TsVisitor visitor) => visitor.Visit<#= node.Name #>(this);
        protected override void EmitContent(Emitter emitter) => <#= node.EmitImplementation #>;
        public override ITsNode ShallowCopy(
            ImmutableArray<ITsAstTriviaNode> leadingTrivia,
            ImmutableArray<ITsAstTriviaNode> trailingTrivia) =>
            <#= node.ShallowCopyImplementation #>;
    }
<# WriteWithExtensionMethods(node); #>
<# } // if (!node.IsInterfaceOnly) #>
<#
} // end foreach node
#>
}
<#
    SaveToFile(fileName);
} // end for loop for files
#>
//
// See the generated nodes in the '<#= GeneratedDirectoryName #>' directory.
//
