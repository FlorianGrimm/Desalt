<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="TsAstNodeGenerator.ttinclude" #>
<#
var nodes = GatherDefinitions();
#>
// ---------------------------------------------------------------------------------------------------------------------
// <copyright file="TsAstNodes.cs" company="Justin Rockwood">
//   Copyright (c) Justin Rockwood. All Rights Reserved. Licensed under the Apache License, Version 2.0. See
//   LICENSE.txt in the project root for license information.
// </copyright>
// <auto-generated/>
// ---------------------------------------------------------------------------------------------------------------------

// DO NOT HAND-MODIFY. This is auto-generated code from the template file '<#= TemplateFileName #>'.
// ReSharper disable ArrangeMethodOrOperatorBody
// ReSharper disable CheckNamespace
// ReSharper disable CompareOfFloatsByEqualityOperator
// ReSharper disable RedundantUsingDirective
// ReSharper disable UnusedMember.Global
// ReSharper disable UnusedMember.Local

#nullable enable

// ---------------------------------------------------------------------------------------------------------------------
// References:
// * Ecma-262 6.0 (ES 2015) Grammar (http://www.ecma-international.org/ecma-262/6.0/)
// ---------------------------------------------------------------------------------------------------------------------

namespace Desalt.TypeScriptAst.Ast
{
    using System;
    using System.Collections.Immutable;
    using Desalt.TypeScriptAst.Emit;
<#
foreach (var node in nodes) {
#>

    //// ===============================================================================================================
    //// <#= node.Name #>
    //// ===============================================================================================================

<# WriteEnumDeclarations(node); #>
    /// <summary>
    /// <#= node.Comment #>
    /// </summary>
    public interface <#= node.InterfaceName #> : <#= node.BaseInterfaces #>
    {
<# WriteProperties(node, isInterface: true); #>
    }
<# if (!node.InterfaceOnly) { #>

    /// <summary>
    /// <#= node.Comment #>
    /// </summary>
    internal partial class <#= node.ClassName #> : <#= node.BaseClassName #>, <#= node.InterfaceName #>
    {
        public <#= node.ClassName #>(<#= node.ToPropertyList(includeTriviaParams: true, multipleLines: true) #>)
            : base(<#= node.BaseCtorArgumentList #>)
        {
<# WriteCtorAssignments(node); #>
        }
<# WriteProperties(node, isInterface: false); #>

        partial void VerifyInputs(<#= node.ToPropertyList() #>);
        public override void Accept(TsVisitor visitor) => visitor.Visit<#= node.Name #>(this);
        protected override void EmitContent(Emitter emitter) => <#= node.EmitImplementation #>;
    }
<# WriteWithExtensionMethods(node); #>
<# } // if (!node.InterfaceOnly) #>
<#
} // end foreach node
#>
}
