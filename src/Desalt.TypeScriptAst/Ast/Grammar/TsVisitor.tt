<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="TsAstNodeGenerator.ttinclude" #>
<# var nodes = GatherAstDefinitions().Where(x => !x.InterfaceOnly); #>
// ---------------------------------------------------------------------------------------------------------------------
// <copyright file="TsVisitor.cs" company="Justin Rockwood">
//   Copyright (c) Justin Rockwood. All Rights Reserved. Licensed under the Apache License, Version 2.0. See
//   LICENSE.txt in the project root for license information.
// </copyright>
// <auto-generated/>
// ---------------------------------------------------------------------------------------------------------------------

// DO NOT HAND-MODIFY. This is auto-generated code from the template file '<#= TemplateFileName #>'.
// ReSharper disable ArrangeMethodOrOperatorBody
// ReSharper disable CheckNamespace

#nullable enable

namespace Desalt.TypeScriptAst.Ast
{
    /// <summary>
    /// Represents an <see cref="ITsAstNode"/> visitor that visits only the single node passed into its Visit method.
    /// </summary>
    public abstract partial class TsVisitor
    {
        public virtual void Visit(ITsAstNode node)
        {
            node?.Accept(this);
        }
<# foreach (var node in nodes) { #>

        /// <summary>
        /// <#= node.Comment.Replace("Represents ", "Visits ") #>
        /// </summary>
        public virtual void Visit<#= node.Name #>(<#= node.InterfaceName #> node) => Visit(node);
<# } // foreach node #>
    }
}
