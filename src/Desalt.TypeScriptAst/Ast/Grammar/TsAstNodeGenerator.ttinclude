<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Linq" #>
<#+
    public const string GeneratedDirectoryName = "Generated";

    public string RootOutputDirectory => Path.Combine(Path.GetDirectoryName(Host.TemplateFile), GeneratedDirectoryName);
    public string TemplateFileName => Path.GetFileName(Host.TemplateFile);
    public string OutputFileName => Path.ChangeExtension(TemplateFileName, ".cs");

    private static readonly XNamespace Xmlns = "https://github.com/jrockwood/Desalt/GrammarSchema.xsd";
    private static readonly string SingleIndent = new string(' ', 4);
    private static readonly string DoubleIndent = new string(' ', 8);
    private static readonly string TripleIndent = new string(' ', 12);

    public void SaveToFile(string fileName)
    {
        Directory.CreateDirectory(RootOutputDirectory);
        string filePath = Path.Combine(RootOutputDirectory, fileName);
        File.WriteAllText(filePath, GenerationEnvironment.ToString());
        GenerationEnvironment.Clear();
    }

    public IReadOnlyList<AstNodeDefinition> GatherAstDefinitions()
    {
        return GatherDefinitions<AstNodeDefinition>("AstNode");
    }

    public IReadOnlyList<TriviaNodeDefinition> GatherTriviaDefinitions()
    {
        return GatherDefinitions<TriviaNodeDefinition>("TriviaNode");
    }

    private IReadOnlyList<T> GatherDefinitions<T>(string nodeNameToGather) where T : NodeDefinition
    {
        string grammarPath = Host.ResolvePath(@"TypeScriptGrammar.xml");
        XDocument doc = XDocument.Load(grammarPath);

        var definitions = new List<T>();

        var triviaDefinitions = doc.Root.Descendants(Xmlns + nodeNameToGather).Select(ParseNode).Cast<T>();
        definitions.AddRange(triviaDefinitions);

        return definitions;
    }

    public void WriteEnumDeclarations(AstNodeDefinition node)
    {
        PushIndent(SingleIndent);

        foreach (var enumDefinition in node.Enums)
        {
            WriteLine($"public enum {enumDefinition.Name}");
            WriteLine("{");
            PushIndent("    ");

            foreach (var value in enumDefinition.Values)
            {
                WriteLine($"{value},");
            }

            PopIndent();
            WriteLine("}");
        }

        PopIndent();

        if (node.Enums.Any())
        {
            WriteLine("");
        }
    }

    public void WriteProperties(NodeDefinition node, bool isInterface)
    {
        if (!node.HasProperties)
        {
            return;
        }

        if (!isInterface)
        {
            WriteLine("");
        }

        PushIndent(DoubleIndent);

        foreach (var property in isInterface ? node.InterfaceProperties : node.Properties)
        {
            if (property.Comment != null)
            {
                WriteLine("/// <summary>");
                WriteLine("/// " + property.Comment);
                WriteLine("/// </summary>");
            }

            if (!isInterface)
            {
                Write("public ");
            }

            WriteLine($"{property.Type} {property.Name} {{ get; }}");
        }

        PopIndent();
    }

    public void WriteCtorAssignments(NodeDefinition node, bool skipVerifyInputs = false)
    {
        PushIndent(TripleIndent);

        if (!skipVerifyInputs)
        {
            WriteLine($"VerifyInputs({node.ToPropertyList(noTypes: true)});");
        }

        foreach (var property in node.Properties)
        {
            WriteLine($"{property.Name} = {property.ArgumentName};");
        }

        PopIndent();
    }

    public void WriteWithExtensionMethods(NodeDefinition node)
    {
        if (!node.HasProperties)
        {
            return;
        }

        WriteLine("");

        PushIndent(SingleIndent);

        WriteLine($"public static class {node.Name}Extensions");
        WriteLine("{");
        PushIndent(SingleIndent);

        for (int i = 0; i < node.Properties.Count; i++)
        {
            var property = node.Properties[i];
            WriteWithExtensionMethod(node, property.Name, property.Type, skipLeadingNewline: i == 0);
        }

//        // Add the trivia node With* methods.
//        WriteWithExtensionMethod(node, "LeadingTrivia", "ImmutableArray<ITsAstTriviaNode>");
//        WriteWithExtensionMethod(node, "TrailingTrivia", "ImmutableArray<ITsAstTriviaNode>");
//
//        WriteTriviaExtensionMethod(node, isLeadingTrivia: true);
//        WriteTriviaExtensionMethod(node, isLeadingTrivia: false);

        PopIndent();
        WriteLine("}");

        PopIndent();
    }

    private void WriteWithExtensionMethod(
        NodeDefinition node,
        string propertyName,
        string propertyType,
        bool skipLeadingNewline = false)
    {
        if (!skipLeadingNewline)
        {
            WriteLine("");
        }

        Write($"public static {node.InterfaceName} With{propertyName}(");
        WriteLine($"this {node.InterfaceName} node, {propertyType} value) =>");
        PushIndent(SingleIndent);
        Write($"node.{propertyName} == value ? node : new {node.ClassName}(");

        for (int j = 0; j < node.Properties.Count; j++)
        {
            var argProp = node.Properties[j];

            if (j > 0)
            {
                Write(", ");
            }

            if (argProp.Name == propertyName)
            {
                Write("value");
            }
            else
            {
                Write($"node.{argProp.Name}");
            }
        }

        // Write the trivia node arguments.
        if (node is AstNodeDefinition)
        {
            Write(", ");
            Write(propertyName == "LeadingTrivia" ? "value, " : "node.LeadingTrivia, ");
            Write(propertyName == "TrailingTrivia" ? "value" : "node.TrailingTrivia");
        }
        else
        {
            Write(", node.PreserveSpacing");
        }

        WriteLine(");");

        PopIndent();
    }

//    private void WriteTriviaExtensionMethod(NodeDefinition node, bool isLeadingTrivia)
//    {
//        WriteLine("");
//
//        string triviaName = isLeadingTrivia ? "LeadingTrivia" : "TrailingTrivia";
//
//        Write($"public static {node.InterfaceName} With{triviaName}(");
//        WriteLine($"this {node.InterfaceName} node, params ITsAstTriviaNode[] value) =>");
//
//        PushIndent(SingleIndent);
//
//        Write($"new {node.ClassName}(");
//        Write(string.Join("", node.Properties.Select(x => $"node.{x.Name}, ")));
//
//        Write(isLeadingTrivia ? "value.ToImmutableArray()" : "node.LeadingTrivia");
//        Write(", ");
//        Write(isLeadingTrivia ? "node.TrailingTrivia" : "value.ToImmutableArray()");
//        WriteLine(");");
//
//        PopIndent();
//    }

    private static readonly ISet<string> s_csharpKeywords = new HashSet<string>
    {
        "operator"
    };

    private static string SafeArgumentName(string name)
    {
        string argumentName = char.ToLowerInvariant(name[0]) + name.Substring(1);

        if (s_csharpKeywords.Contains(argumentName))
        {
            argumentName = "@" + argumentName;
        }

        return argumentName;
    }

    private static NodeDefinition ParseNode(XElement node)
    {
        string name = (string)node.Attribute("name");
        string comment = (string)node.Element(Xmlns + "Comment") ?? string.Empty;

        string rawBaseInterfaces = (string)node.Attribute("baseInterfaces");
        string baseInterfaces = string.Join(", ", rawBaseInterfaces.Split(',').Select(s => s.Trim()));

        bool interfaceOnly = ((bool?)node.Attribute("interfaceOnly")) ?? false;

        var properties = new List<PropertyDefinition>();
        foreach (var propertyNode in node.Descendants(Xmlns + "Property"))
        {
            string propertyName = (string)propertyNode.Attribute("name");
            string propertyType = (string)propertyNode.Attribute("type");
            string propertyComment = (string)propertyNode.Element(Xmlns + "Comment");
            bool declaredInBaseInterface = ((bool?)propertyNode.Attribute("declaredInBaseInterface")).GetValueOrDefault();

            var propertyDefinition =
                new PropertyDefinition(propertyName, propertyType, propertyComment, declaredInBaseInterface);
            properties.Add(propertyDefinition);
        }

        var enums = new List<EnumDefinition>();
        foreach (var enumNode in node.Descendants(Xmlns + "Enum"))
        {
            string enumName = (string)enumNode.Attribute("name");
            var enumValues = enumNode.Descendants(Xmlns + "EnumValue").Select(x => (string)x.Attribute("name")).ToList();
            var enumDefinition = new EnumDefinition(enumName, enumValues);
            enums.Add(enumDefinition);
        }

        if (node.Name.LocalName == "TriviaNode")
        {
            return new TriviaNodeDefinition(name)
            {
                Comment = comment,
                BaseClassName = "TsAstTriviaNode",
                BaseInterfaces = baseInterfaces,
                Enums = enums,
                InterfaceOnly = interfaceOnly,
                Properties = properties,
            };
        }

        return new AstNodeDefinition(name)
        {
            Comment = comment,
            BaseClassName = "TsAstNode",
            BaseInterfaces = baseInterfaces,
            Enums = enums,
            InterfaceOnly = interfaceOnly,
            Properties = properties,
        };
    }

    public abstract class NodeDefinition
    {
        protected NodeDefinition(string name)
        {
            Name = name;
        }

        // Read-only Properties
        public string Name { get; }
        public abstract string BaseCtorArgumentList { get; }

        // Writable Properties
        public string BaseClassName { get; set; }
        public string Comment { get; set; }
        public string BaseInterfaces { get; set; }
        public IList<EnumDefinition> Enums { get; set; } = new List<EnumDefinition>();
        public bool InterfaceOnly { get; set; }
        public IList<PropertyDefinition> Properties { get; set; } = new List<PropertyDefinition>();

        // Computed Properties
        public string ArgumentName => SafeArgumentName(Name);
        public IEnumerable<string> BaseInterfaceList => BaseInterfaces.Split(',').Select(s => s.Trim());
        public string ClassName => "Ts" + Name;
        public string EmitImplementation => $"TsAstEmitter.Emit{Name}(emitter, this)";
        public bool HasProperties => Properties.Any();
        public string InterfaceName => "ITs" + Name;

        public IEnumerable<PropertyDefinition> InterfaceProperties =>
            Properties.Where(prop => !prop.DeclaredInBaseInterface);

        public string ToPropertyList(
            bool includeTriviaParams = false,
            bool multipleLines = false,
            bool noTypes = false,
            bool prefixComma = false,
            bool useNameInsteadOfArgumentName = false)
        {
            string indent = TripleIndent;

            var builder = new StringBuilder();

            for (int i = 0; i < Properties.Count; i++)
            {
                var property = Properties[i];

                if (i == 0)
                {
                    if (prefixComma && multipleLines)
                    {
                        builder.AppendLine(",");
                    }
                    else if (prefixComma && !multipleLines)
                    {
                        builder.Append(", ");
                    }

                    if (multipleLines)
                    {
                        builder.AppendLine().Append(indent);
                    }
                }
                else
                {
                    if (multipleLines)
                    {
                        builder.AppendLine(",").Append(indent);
                    }
                    else
                    {
                        builder.Append(", ");
                    }
                }

                if (!noTypes)
                {
                    builder.Append(property.Type).Append(" ");
                }

                builder.Append(useNameInsteadOfArgumentName ? property.Name : property.ArgumentName);
            }

            // Add the base class argumnets.
            if (includeTriviaParams)
            {
                if (Properties.Count > 0)
                {
                    builder.Append(",");
                }

                builder.AppendLine().Append(indent).Append("ImmutableArray<ITsAstTriviaNode>? leadingTrivia = null");
                builder.AppendLine(",").Append(indent).Append("ImmutableArray<ITsAstTriviaNode>? trailingTrivia = null");
            }

            return builder.ToString();
        }
    }

    public sealed class TriviaNodeDefinition : NodeDefinition
    {
        public TriviaNodeDefinition(string name)
            : base(name)
        {
        }

        // Read-only Properties
        public override string BaseCtorArgumentList => "preserveSpacing";
    }

    public sealed class AstNodeDefinition : NodeDefinition
    {
        public AstNodeDefinition(string name)
            : base(name)
        {
        }

        // Read-only Properties
        public override string BaseCtorArgumentList => "leadingTrivia, trailingTrivia";
    }

    public sealed class PropertyDefinition
    {
        public PropertyDefinition(string name, string type, string comment, bool declaredInBaseInterface)
        {
            Name = name;
            Type = type;
            Comment = comment;
            DeclaredInBaseInterface = declaredInBaseInterface;
        }

        public string Name { get; }
        public string ArgumentName => SafeArgumentName(Name);

        public string Type { get; }
        public string Comment { get; }
        public bool DeclaredInBaseInterface { get; }
    }

    public sealed class EnumDefinition
    {
        public EnumDefinition(string name, IEnumerable<string> values = null)
        {
            Name = name;
            Values = values?.ToList() ?? new List<string>();
        }

        public string Name { get; }
        public IList<string> Values { get; }
    }
#>
