<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="12.0">

  <UsingTask TaskName="SaltarellePreprocessor" AssemblyFile="$(SaltarelleDir)Preprocessor\Saltarelle.Preprocessor.MSBuild.dll" />

  <!-- Saltarelle specific settings -->
  <PropertyGroup>
    <DebugSymbols>true</DebugSymbols>
    <DebugType>pdbonly</DebugType>
    <Optimize>false</Optimize>
    <AutoUnifyAssemblyReferences>false</AutoUnifyAssemblyReferences>
    <BuildingProject>true</BuildingProject>
    <UseHostCompilerIfAvailable>false</UseHostCompilerIfAvailable>
    <DefineConstants>$(DefineConstants);SALTARELLE</DefineConstants>
    <NoStdLib>True</NoStdLib>
    <!-- Saltarelle only supports up to C# 5 right now -->
    <LangVersion>5</LangVersion>

    <!-- CS1591 = Missing XML comment for publicly visible type or member 'Type_or_Member'-->
    <!-- CS0626 = is marked as an external but has no DllImport attribute-->
    <!-- CS0824 = Constructor is marked `external' but has no external implementation specified -->
    <!-- CS1574 = XML comment has cref attribute that could not be resolved -->
    <!-- CS0414 = The private field is assigned but its value is never used-->
    <!-- CS0067 = A public event is never used -->
    <!-- CS1635 = Cannot restore warning `CS0414' because it was disabled globally -->
    <!-- CS0219 = The variable is assigned but its value is never used -->
    <!-- CS7536 = The type parameter `TExpected` is not available for use in script (Saltarelle-specific) -->
    <NoWarn>1591;0626;0824;1574;0414;0067;1635;0219;7536</NoWarn>
    <SaltarelleRunAjaxMinOnCompile Condition=" '$(SaltarelleRunAjaxMinOnCompile)' == '' ">false</SaltarelleRunAjaxMinOnCompile>
    <ReferencePath>$(SaltarelleAssemblyRefsDir)</ReferencePath>
    <DeploymentPath Condition=" '$(DeploymentPath)' == '' and '$(StandaloneDeployment)' == 'true'">$(JsDeploymentPath)</DeploymentPath>
    <DeploymentPath Condition=" '$(DeploymentPath)' == '' and '$(NoSaltarelleDeploy)' != 'true' and '$(Configuration)' == 'Debug' ">$(JsDeploymentPath)</DeploymentPath>
    <DeploymentPath Condition=" '$(DeploymentPath)' != '' and !HasTrailingSlash('$(DeploymentPath)') ">$(DeploymentPath)\</DeploymentPath>
    <AdditionalDeploymentPath Condition=" '$(AdditionalDeploymentPath)' != '' and !HasTrailingSlash('$(AdditionalDeploymentPath)') ">$(AdditionalDeploymentPath)\</AdditionalDeploymentPath>
    <SaltarelleEmitDebugInformation Condition=" '$(Configuration)' == 'Debug' ">true</SaltarelleEmitDebugInformation>
    <SaltarelleEmitDebugInformation Condition=" '$(SaltarelleEmitDebugInformation)' == '' ">false</SaltarelleEmitDebugInformation>

    <!-- Tableau-specific additions to the compiler -->
    <SaltarelleGenerateFunctionNames Condition=" '$(Configuration)' == 'Debug' ">true</SaltarelleGenerateFunctionNames>
    <SaltarelleGenerateFunctionNames Condition=" '$(SaltarelleGenerateFunctionNames)' == '' ">false</SaltarelleGenerateFunctionNames>
    <SaltarelleStrictMode Condition=" '$(SaltarelleStrictMode)' == '' ">false</SaltarelleStrictMode>
    <SaltarellePreserveComments Condition=" '$(SaltarellePreserveComments)' == '' ">false</SaltarellePreserveComments>

    <SaltarelleDocumentationFile Condition=" $(UseDocumentationFile) != false ">$(OutputPath)$(AssemblyName).doc.js</SaltarelleDocumentationFile>

    <SaltarelleSuppressDocumentation Condition=" $(UseDocumentationFile) == true ">false</SaltarelleSuppressDocumentation>
    <SaltarelleSuppressDocumentation Condition=" '$(SaltarelleSuppressDocumentation)' == '' ">true</SaltarelleSuppressDocumentation>

    <SaltarelleOutputFileNameExtension Condition=" '$(SaltarelleOutputFileNameExtension)' == '' and '$(Configuration)' == 'Debug' ">.debug.js</SaltarelleOutputFileNameExtension>
    <SaltarelleOutputFileNameExtension Condition=" '$(SaltarelleOutputFileNameExtension)' == '' and '$(Configuration)' == 'Release' ">.js</SaltarelleOutputFileNameExtension>

    <SaltarelleMinimize Condition=" '$(Configuration)' == 'Debug' ">false</SaltarelleMinimize>
    <SaltarelleMinimize Condition=" '$(Configuration)' == 'Release' ">true</SaltarelleMinimize>
  </PropertyGroup>

  <!-- All of the Saltarelle metadata and script projects require these assemblies -->
  <ItemGroup>
    <Reference Include="mscorlib">
      <Private>False</Private>
    </Reference>
    <Reference Include="Web">
      <Private>False</Private>
    </Reference>
    <Reference Include="jQuery">
      <Private>False</Private>
    </Reference>
  </ItemGroup>

  <!-- Get the standard C# build targets -->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />

  <!-- This needs to be dinfed after including Microsoft.CSharp.targets -->
  <PropertyGroup>
    <AssemblySearchPaths>$(SaltarelleAssemblyRefsDir);$(AssemblySearchPaths)</AssemblySearchPaths>
  </PropertyGroup>

  <Target Name="CalculateSaltarelleOutputFiles">
    <PropertyGroup>
      <SaltarelleAssemblyName Condition=" '$(SaltarelleAssemblyName)' == '' ">$(AssemblyName)</SaltarelleAssemblyName>
      <SaltarelleMainOutputFile>$(OutputPath)$(SaltarelleAssemblyName)$(SaltarelleOutputFileNameExtension)</SaltarelleMainOutputFile>

      <_TempSaltarelleCompileOutputFile>$(IntermediateOutputPath)$(SaltarelleAssemblyName).compiledCode$(SaltarelleOutputFileNameExtension)</_TempSaltarelleCompileOutputFile>
      <_TempSaltarelleMainPreprocessOutputFile>$(IntermediateOutputPath)$(SaltarelleAssemblyName).afterPreprocess$(SaltarelleOutputFileNameExtension)</_TempSaltarelleMainPreprocessOutputFile>
    </PropertyGroup>
    <ItemGroup>
      <!-- Main outputs -->
      <SaltarelleOutputFile Include="$(SaltarelleMainOutputFile)" />
      <SaltarelleOutputFile Include="$(DeploymentPath)$(SaltarelleAssemblyName)$(SaltarelleOutputFileNameExtension)" Condition=" '$(DeploymentPath)' != '' " />
      <SaltarelleOutputFile Include="$(AdditionalDeploymentPath)$(SaltarelleAssemblyName)$(SaltarelleOutputFileNameExtension)" Condition=" '$(AdditionalDeploymentPath)' != '' " />

      <!-- Temp files -->
      <SaltarelleTempFiles Include="$(_TempSaltarelleCompileOutputFile)" />
      <SaltarelleTempFiles Include="$(_TempSaltarelleMainPreprocessOutputFile)" />
    </ItemGroup>
  </Target>

  <!--
  Determine the command line arguments to pass to the Saltarelle compiler and write them to a
  response file, with one line per argument. The $(SaltarelleResponseFile) contains the path to the
  response file.
  -->
  <Target Name="WriteSaltarelleExecResponseFile">
    <PropertyGroup>
      <SaltarelleResponseFile>$(IntermediateOutputPath)ResponseFile.txt</SaltarelleResponseFile>
    </PropertyGroup>

    <ItemGroup>
      <_NoWarnAsItemGroup Include="$(NoWarn)" />
      <_DefineAsItemGroup Include="$(DefineConstants)" />

      <_SaltarelleResponseFileContents Include="-target:$(OutputType)" />
      <_SaltarelleResponseFileContents Include="-debug" Condition="$(SaltarelleEmitDebugInformation) == true" />
      <_SaltarelleResponseFileContents Include="-warn:$(WarningLevel)" />
      <_SaltarelleResponseFileContents Include="@(_NoWarnAsItemGroup -> '-nowarn:%(Identity)')" />
      <_SaltarelleResponseFileContents Include="-warnaserror" Condition="$(TreatWarningsAsErrors) == true" />
      <_SaltarelleResponseFileContents Include="@(_DefineAsItemGroup -> '-define:%(Identity)')" />
      <_SaltarelleResponseFileContents Include="-doc:$(SaltarelleDocumentationFile)" Condition=" '$(SaltarelleDocumentationFile)' != '' " />
      <_SaltarelleResponseFileContents Include="@(IntermediateAssembly -> '-outasm:%(Identity)')" />

      <!-- Tableau-specific additions to the compiler -->
      <_SaltarelleResponseFileContents Include="-funcnames+" Condition="$(SaltarelleGenerateFunctionNames) == true" />
      <_SaltarelleResponseFileContents Include="-funcnames-" Condition="$(SaltarelleGenerateFunctionNames) == false" />

      <_SaltarelleResponseFileContents Include="-strictmode+" Condition="$(SaltarelleStrictMode) == true" />
      <_SaltarelleResponseFileContents Include="-strictmode-" Condition="$(SaltarelleStrictMode) == false" />

      <_SaltarelleResponseFileContents Include="-comments+" Condition="$(SaltarellePreserveComments) == true" />
      <_SaltarelleResponseFileContents Include="-comments-" Condition="$(SaltarellePreserveComments) == false" />

      <!-- Put the long references and sources last to make the command easier to read -->
      <_SaltarelleResponseFileContents Include="@(AdditionalLibPaths -> '-lib:%(Identity)')" />
      <_SaltarelleResponseFileContents Include="@(ReferencePath -> '-reference:%(Identity)')" Condition=" '@(ReferencePath)' != '' " />
      <_SaltarelleResponseFileContents Include="@(ReferenceDependencyPaths -> '-reference:%(Identity)')" Condition=" '@(ReferenceDependencyPaths)' != '' " />

      <!-- Add all of the source files -->
      <_SaltarelleResponseFileContents Include="@(Compile)" />
    </ItemGroup>

    <WriteLinesToFile File="$(SaltarelleResponseFile)" Lines="@(_SaltarelleResponseFileContents)" Overwrite="true" />

    <!-- Add the response file to the list of files to clean -->
    <ItemGroup>
      <FileWrites Include="$(SaltarelleResponseFile)" />
    </ItemGroup>
  </Target>

  <!--
  Compile using Saltarelle only if we're a Saltarelle project (vs. a metadata project). We also don't
  need to compile to JavaScript if we're only doing code analysis, since FxCop uses the .dll and
  not the built JavaScript.
  -->
  <Target Name="SaltarelleCompile" AfterTargets="AfterCompile"
          DependsOnTargets="CalculateSaltarelleOutputFiles;WriteSaltarelleExecResponseFile"
          Condition=" '$(SaltarelleProject)' == 'true' and '$(Configuration)' != 'CodeAnalysis' "
          Inputs="@(Compile);@(IntermediateAssembly);$(TemplateFile);@(TemplateFileDependency)"
          Outputs="@(SaltarelleOutputFile)">

    <Message Importance="low" Text="Running Saltarelle compiler" />
    <PropertyGroup>
      <SaltarelleStartTicks>$([System.DateTime]::UtcNow.Ticks)</SaltarelleStartTicks>
    </PropertyGroup>

    <Exec Command="&quot;$(DotNetExePath)&quot; &quot;$(SaltarelleCompilerExePath)&quot; -outscript:&quot;$(_TempSaltarelleCompileOutputFile)&quot; &quot;@$(SaltarelleResponseFile)&quot;"
          WorkingDirectory="$(MSBuildProjectDirectory)" />

    <PropertyGroup>
      <SaltarelleFinishTicks>$([System.DateTime]::UtcNow.Ticks)</SaltarelleFinishTicks>
      <SaltarelleElapsedTicks>$([MSBuild]::Subtract($(SaltarelleFinishTicks), $(SaltarelleStartTicks)))</SaltarelleElapsedTicks>
      <SaltarelleElapsedTime>$([System.TimeSpan]::FromTicks($(SaltarelleElapsedTicks)))</SaltarelleElapsedTime>
    </PropertyGroup>
    <Message Importance="normal" Text="Saltarelle compile time: $(SaltarelleElapsedTime)" />
  </Target>

  <!--
  The main Saltarelle output will be cleaned up by the main build, but we need to clean
  up some other stuff left behind by custom targets defined here.
  -->
  <Target Name="CleanSaltarelleFiles" AfterTargets="CoreClean"
          Condition=" '$(Configuration)' != 'CodeAnalysis' "
          DependsOnTargets="CalculateSaltarelleOutputFiles">
    <Message Importance="low" Text="Cleaning up Saltarelle compilation detritus" />

    <!-- Clean up the temporary files -->
    <Delete  ContinueOnError="true" TreatErrorsAsWarnings="true" Files="@(SaltarelleTempFiles)" />
  </Target>
</Project>
