<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NativeJsTypeDefs</name>
    </assembly>
    <members>
        <member name="M:System.Html.HtmlExtensions.CreateTextRange(System.Html.Element)">
            <summary>
            Use to create an Internet Explorer TextRange object
            </summary>
        </member>
        <member name="M:System.Html.InputEvent.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:System.Html.InputEvent" /> class from being created.
            UNUSED - Stub constructor to make compiler happy
            </summary>
        </member>
        <member name="T:System.Html.VisualViewport">
             <summary>
             Adapted from https://developer.mozilla.org/en-US/docs/Web/API/VisualViewport
            
             Not all browsers support the visual viewport yet. If you use this, please make sure your code works on all
             supported browsers.
            
             For good measure, make sure that the Linux tests pass before submitting, since Linux and Windows may use
             different browser versions for running tests.
             The motivation is that Saltarelle may embed type metadata during transpilation, which can cause a ReferenceError
             to be thrown in unexpected places if the browser does not support the visual viewport (see TFSID 732393).
             </summary>
             <remarks>
             This should inherit from EventTarget, but unfortunately the EventTarget constructor is private. If you need to
             use this as an EventTarget you will probably need to use a type cast.
             </remarks>
        </member>
        <member name="T:System.Html.JsTextRange">
            <summary>
            Internet Explorer TextRange object.
            https://msdn.microsoft.com/en-us/library/ms535872(v=vs.85).aspx
            Note: this object has not been fully defined.
            </summary>
        </member>
        <member name="M:System.Html.JsTextRange.Move(System.Html.JsTextRange.Unit)">
            <summary>
            Collapses the given text range and moves the empty range by the given number of units,
            default is 1
            </summary>
            <returns>Number of units moved.</returns>
        </member>
        <member name="M:System.Html.JsTextRange.Select">
            <summary>
            Makes the selection equal to the current object.
            </summary>
        </member>
        <member name="M:System.Html.JsTextRange.ScrollIntoView">
            <summary>
            Causes the object to scroll into view, aligning it either at the top or bottom of the window.
            </summary>
        </member>
        <member name="T:System.Collections.Generic.JsArray`1">
            <summary>
            This is a type-safe wrapper around a native JavaScript array that has
            no dependencies on mscorlib or any other 3rd party library.
            </summary>
            <typeparam name="T">The type of element in the array.</typeparam>
        </member>
        <member name="M:System.Collections.Generic.JsArray`1.Concat(`0[])">
            <summary>
            Combines two or more arrays.
            </summary>
            <param name="items">Optional. Additional items to add to the end of the array.</param>
            <returns>An Array object containing the concatenation of this array
            and any other supplied items.</returns>
            <remarks><para>Returns an Array object containing the
            concatenation of array1 and any other supplied items.</para>
            <para>The items to be added (item1 itemN) to the array are added, in
            order, starting from the first item in the list. If one of the items
            is an array, its contents are added to the end of array1. If the item
            is anything other than an array, it is added to the end of the array
            as a single array element.</para>
            <para>Elements of source arrays are copied to the resulting array as follows:</para>
            <list type="bullet"><item><description>
            If an object is copied from any of the arrays being concatenated to
            the new array, the object reference continues to point to the same
            object. A change in either the new array or the original array will
            result in a change to the other.</description></item>
            <item><description>If a number or string value is added to the new
            array, only the value is copied. Changing the value in one array does
            not affect the value in the other.</description></item></list>
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.JsArray`1.GetEnumerator">
            <summary>
            Makes <see cref="T:System.Collections.Generic.JsArray`1"/> enumerable so it can be used in native "foreach" loops.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.JsArray`1.IndexOf(`0)">
            <summary>
            The indexOf() method returns the first index at which a given element can be found in the
            array, or -1 if it is not present.
            </summary>
            <param name="searchElement">Element to locate in the array.</param>
            <returns>The first index of the element in the array; -1 if not found.</returns>
        </member>
        <member name="M:System.Collections.Generic.JsArray`1.Join">
            <summary>
            Adds all the elements of an array separated by the specified separator string.
            </summary>
            <returns>A string with all of the elements separated by the specified
            separator string.</returns>
            <remarks>If any element of the array is undefined or null, it is
            treated as an empty string.</remarks>
        </member>
        <member name="M:System.Collections.Generic.JsArray`1.Join(System.String)">
            <summary>
            Adds all the elements of an array separated by the specified separator string.
            </summary>
            <param name="separator">Optional. A string used to separate one element
            of an array from the next in the resulting String. If omitted, the
            array elements are separated with a comma.</param>
            <returns>A string with all of the elements separated by the specified
            separator string.</returns>
            <remarks>If any element of the array is undefined or null, it is
            treated as an empty string.</remarks>
        </member>
        <member name="M:System.Collections.Generic.JsArray`1.Map``1(System.Func{`0,``0})">
            <summary>
            Creates a new array with the results of calling a provided function on every element in this array.
            </summary>
            <param name="mapFunc">T: currentValue, int: index</param>
            <typeparam name="TResult">The result type of the map function.</typeparam>
        </member>
        <member name="M:System.Collections.Generic.JsArray`1.Map``1(System.Func{`0,System.Int32,``0})">
            <summary>
            Creates a new array with the results of calling a provided function on every element in this array.
            </summary>
            <param name="mapFunc">T: currentValue, int: index</param>
            <typeparam name="TResult">The result type of the map function.</typeparam>
        </member>
        <member name="M:System.Collections.Generic.JsArray`1.Map``1(System.Func{`0,System.Int32,System.Collections.Generic.JsArray{`0},``0})">
            <summary>
            Creates a new array with the results of calling a provided function on every element in this array.
            </summary>
            <typeparam name="TResult">The result type of the map function.</typeparam>
            <param name="mapFunc">T: currentValue, int: index, JsArray: original array</param>
        </member>
        <member name="M:System.Collections.Generic.JsArray`1.Pop">
            <summary>
            Removes the last element from an array and returns it.
            </summary>
            <returns>The last element from the array or undefined.</returns>
        </member>
        <member name="M:System.Collections.Generic.JsArray`1.Push(`0[])">
            <summary>
            Appends new elements to an array, and returns the new length of the array.
            </summary>
            <param name="items">Optional. New elements of the Array.</param>
            <returns>The new length of the array.</returns>
        </member>
        <member name="M:System.Collections.Generic.JsArray`1.Reverse">
            <summary>
            Reverses the elements in an Array.
            </summary>
            <returns>The reversed array.</returns>
            <remarks><para>The reverse method reverses the elements of an Array
            object in place. It does not create a new Array object during
            execution.</para>
            <para>If the array is not contiguous, the reverse method creates
            elements in the array that fill the gaps in the array. Each of these
            created elements has the value undefined.</para></remarks>
        </member>
        <member name="M:System.Collections.Generic.JsArray`1.Shift">
            <summary>
            Removes the first element from an array and returns it.
            </summary>
            <returns>The element that was removed.</returns>
        </member>
        <member name="M:System.Collections.Generic.JsArray`1.Slice(System.Int32)">
            <summary>
            Returns a section of an array.
            </summary>
            <param name="start">Required. The beginning of the specified portion of the array.</param>
            <returns>An Array object containing the specified portion of the array.</returns>
        </member>
        <member name="M:System.Collections.Generic.JsArray`1.Slice(System.Int32,System.Int32)">
            <summary>
            Returns a section of an array.
            </summary>
            <param name="start">Required. The beginning of the specified portion of the array.</param>
            <param name="end">Optional. The end of the specified portion of the array.</param>
            <returns>An Array object containing the specified portion of the array.</returns>
            <remarks>The slice method copies up to, but not including, the element
            indicated by <paramref name="end"/>. If <paramref name="start"/> is
            negative, it is treated as length + <paramref name="start"/>, where
            length is the length of the array. If <paramref name="end"/> is negative,
            it is treated as length + <paramref name="end"/> where length is the
            length of the array. If <paramref name="end"/> is omitted, extraction
            continues to the end of the array. If <paramref name="end"/> occurs
            before <paramref name="start"/>, no elements are copied to the new array.</remarks>
        </member>
        <member name="M:System.Collections.Generic.JsArray`1.Sort">
            <summary>
            Sorts an array.
            </summary>
            <returns>The sorted array.</returns>
            <remarks>The sort method sorts the Array object in place; no new
            Array object is created during execution.</remarks>
        </member>
        <member name="M:System.Collections.Generic.JsArray`1.Sort(System.Collections.Generic.CompareCallback{`0})">
            <summary>
            Sorts an array.
            </summary>
            <param name="sortFunction">Optional. The name of the function used to
            determine the order of the elements. If omitted, the elements are
            sorted in ascending, ASCII character order.</param>
            <returns>The sorted array.</returns>
            <remarks>The sort method sorts the Array object in place; no new
            Array object is created during execution.</remarks>
        </member>
        <member name="M:System.Collections.Generic.JsArray`1.Splice(System.Int32,System.Int32,`0[])">
            <summary>
            Removes elements from an array and, if necessary, inserts new elements
            in their place, returning the deleted elements.
            </summary>
            <param name="start">Required. The zero-based location in the array
            from which to start removing elements.</param>
            <param name="deleteCount">Required. The number of elements to remove.</param>
            <param name="items">Optional. Elements to insert into the array in
            place of the deleted elements.</param>
            <returns>An array of deleted items.</returns>
            <remarks>The splice method modifies the array by removing the specified
            number of elements from position start and inserting new elements.
            The deleted elements are returned as a new Array object.</remarks>
        </member>
        <member name="M:System.Collections.Generic.JsArray`1.ToString">
            <summary>
            Returns a string representation of an array.
            </summary>
            <returns>The string representation of the array.</returns>
            <remarks>The elements of an Array are converted to strings. The
            resulting strings are concatenated and separated by commas.</remarks>
        </member>
        <member name="M:System.Collections.Generic.JsArray`1.Unshift(`0[])">
            <summary>
            Inserts new elements at the start of an array.
            </summary>
            <param name="items">Elements to insert at the start of the Array.</param>
            <remarks>Inserts elements into the start of an
            array, so they appear in the same order in which they appear in the
            argument list.</remarks>
        </member>
        <member name="M:System.Collections.Generic.JsArray`1.ValueOf">
            <summary>
            Returns the primitive value of the specified object.
            </summary>
            <returns>The array instance.</returns>
        </member>
        <member name="T:System.Collections.Generic.JsMap`2">
            <summary>
            Type-safe wrapper for EcmaScript6 map:
            https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map
            The Map object is a simple key/value map.
            Any value (both objects and primitive values) may be used as either a key or a value.
            Compatibility matrix: http://kangax.github.io/compat-table/es6/
            </summary>
            <typeparam name="TKey">Type of the key</typeparam>
            <typeparam name="TValue">Type of the value</typeparam>
        </member>
        <member name="P:System.Collections.Generic.JsMap`2.Size">
            <summary>
            Returns the number of key/value pairs in the Map object.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.JsMap`2.Clear">
            <summary>
            Removes all elements from the Map object.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.JsMap`2.Delete(`0)">
            <summary>
            Removes any value associated with the key
            </summary>
            <param name="key">Key to delete</param>
            <returns>returns the value that Map.prototype.has(key) would have previously returned.
            Map.prototype.has(key) will return false afterwards.</returns>
        </member>
        <member name="M:System.Collections.Generic.JsMap`2.Get(`0)">
            <summary>
            Returns the value associated with the key, or undefined if there is none.
            </summary>
            <param name="key">Key to return value for</param>
            <returns>Returns value associated with given key</returns>
        </member>
        <member name="M:System.Collections.Generic.JsMap`2.Has(`0)">
            <summary>
            Returns a boolean asserting whether a value has been associated
            with the key in the Map object or not.
            </summary>
            <param name="key">Key to check for</param>
            <returns>true if map contains value with given key</returns>
        </member>
        <member name="M:System.Collections.Generic.JsMap`2.Set(`0,`1)">
            <summary>
            Sets the value for the key in the Map object.
            </summary>
            <param name="key">Key to associate with</param>
            <param name="value">Value to associate with key</param>
            <returns>Returns the Map object (this).</returns>
        </member>
        <member name="M:System.Collections.Generic.JsMap`2.ForEach(System.Action{`1})">
            <summary>
            Executes a provided function once per each value in the Map object, in insertion order.
            </summary>
            <param name="callbackFn">Function to execute for each element.</param>
        </member>
        <member name="M:System.Collections.Generic.JsMap`2.ForEach(System.Action{`1,`0})">
            <summary>
            Executes a provided function once per each value/key pair in the Map object, in insertion order.
            </summary>
            <param name="callbackFn">Function to execute for each element.</param>
        </member>
        <member name="T:System.Collections.Generic.JsReadOnlyArray`1">
            <summary>
            This is a type-safe wrapper around a native JavaScript array that has
            no dependencies on mscorlib or any other 3rd party library.
            </summary>
            <typeparam name="T">The type of element in the array.</typeparam>
        </member>
        <member name="M:System.Collections.Generic.JsReadOnlyArray`1.GetEnumerator">
            <summary>
            Makes <see cref="T:System.Collections.Generic.JsReadOnlyArray`1"/> enumerable so it can be used in native "foreach" loops.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.JsReadOnlyArray`1.Concat(System.Object[])">
            <summary>
            Combines two or more arrays.
            </summary>
            <param name="items">Optional. Additional items to add to the end of the array.</param>
            <returns>An Array object containing the concatenation of this array
            and any other supplied items.</returns>
            <remarks><para>Returns an Array object containing the
            concatenation of array1 and any other supplied items.</para>
            <para>The items to be added (item1 itemN) to the array are added, in
            order, starting from the first item in the list. If one of the items
            is an array, its contents are added to the end of array1. If the item
            is anything other than an array, it is added to the end of the array
            as a single array element.</para>
            <para>Elements of source arrays are copied to the resulting array as follows:</para>
            <list type="bullet"><item><description>
            If an object is copied from any of the arrays being concatenated to
            the new array, the object reference continues to point to the same
            object. A change in either the new array or the original array will
            result in a change to the other.</description></item>
            <item><description>If a number or string value is added to the new
            array, only the value is copied. Changing the value in one array does
            not affect the value in the other.</description></item></list>
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.JsReadOnlyArray`1.Join">
            <summary>
            Adds all the elements of an array separated by the specified separator string.
            </summary>
            <returns>A string with all of the elements separated by the specified
            separator string.</returns>
            <remarks>If any element of the array is undefined or null, it is
            treated as an empty string.</remarks>
        </member>
        <member name="M:System.Collections.Generic.JsReadOnlyArray`1.Join(System.String)">
            <summary>
            Adds all the elements of an array separated by the specified separator string.
            </summary>
            <param name="separator">Optional. A string used to separate one element
            of an array from the next in the resulting String. If omitted, the
            array elements are separated with a comma.</param>
            <returns>A string with all of the elements separated by the specified
            separator string.</returns>
            <remarks>If any element of the array is undefined or null, it is
            treated as an empty string.</remarks>
        </member>
        <member name="M:System.Collections.Generic.JsReadOnlyArray`1.Slice(System.Int32)">
            <summary>
            Returns a section of an array.
            </summary>
            <param name="start">Required. The beginning of the specified portion of the array.</param>
            <returns>An Array object containing the specified portion of the array.</returns>
        </member>
        <member name="M:System.Collections.Generic.JsReadOnlyArray`1.Slice(System.Int32,System.Int32)">
            <summary>
            Returns a section of an array.
            </summary>
            <param name="start">Required. The beginning of the specified portion of the array.</param>
            <param name="end">Optional. The end of the specified portion of the array.</param>
            <returns>An Array object containing the specified portion of the array.</returns>
            <remarks>The slice method copies up to, but not including, the element
            indicated by <paramref name="end"/>. If <paramref name="start"/> is
            negative, it is treated as length + <paramref name="start"/>, where
            length is the length of the array. If <paramref name="end"/> is negative,
            it is treated as length + <paramref name="end"/> where length is the
            length of the array. If <paramref name="end"/> is omitted, extraction
            continues to the end of the array. If <paramref name="end"/> occurs
            before <paramref name="start"/>, no elements are copied to the new array.</remarks>
        </member>
        <member name="M:System.Collections.Generic.JsReadOnlyArray`1.ToString">
            <summary>
            Returns a string representation of an array.
            </summary>
            <returns>The string representation of the array.</returns>
            <remarks>The elements of an Array are converted to strings. The
            resulting strings are concatenated and separated by commas.</remarks>
        </member>
        <member name="M:System.Collections.Generic.JsReadOnlyArray`1.ValueOf">
            <summary>
            Returns the primitive value of the specified object.
            </summary>
            <returns>The array instance.</returns>
        </member>
        <member name="T:System.Collections.Generic.JsSet`1">
            <summary>
            Type-safe wrapper for EcmaScript6 set:
            https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set
            </summary>
            <typeparam name="T">Type of the element that set stores</typeparam>
        </member>
        <member name="P:System.Collections.Generic.JsSet`1.Size">
            <summary>
            Returns the number of values in the Set object.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.JsSet`1.Add(`0)">
            <summary>
            Appends a new element with the given value to the Set object.
            </summary>
            <param name="entry"></param>
            <returns>Returns the Set object (this)</returns>
        </member>
        <member name="M:System.Collections.Generic.JsSet`1.Clear">
            <summary>
            Removes all elements from the Set object.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.JsSet`1.Delete(`0)">
            <summary>
            Removes the element associated to the value
            </summary>
            <param name="entry">The value that Set.prototype.has(value) would have previously returned</param>
        </member>
        <member name="M:System.Collections.Generic.JsSet`1.Has(`0)">
            <summary>
            Returns a boolean asserting whether an element is present with the given value in the Set object or not.
            </summary>
            <param name="entry"></param>
            <returns>true if entry present in the set</returns>
        </member>
        <member name="M:System.Collections.Generic.JsSet`1.ForEach(System.Action{`0})">
            <summary>
            Calls callbackFn once for each value present in the Set object, in insertion order
            </summary>
            <param name="callbackFn">Function to invoke for every entry in the set</param>
        </member>
        <member name="T:System.Collections.Generic.JsStack`1">
            <summary>
            This is a type-safe wrapper around a native JavaScript array that has
            no dependencies on mscorlib or any other 3rd party library. Even though
            this is really a JavaScript array, only the stack-related functions are
            exposed.
            </summary>
            <typeparam name="T">The type of element in the array.</typeparam>
        </member>
        <member name="M:System.Collections.Generic.JsStack`1.GetEnumerator">
            <summary>
            Makes <see cref="T:System.Collections.Generic.JsStack`1"/> enumerable so it can be used in native "foreach" loops.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.JsStack`1.Pop">
            <summary>
            Removes the last element from an array and returns it.
            </summary>
            <returns>The last element from the array or undefined.</returns>
        </member>
        <member name="M:System.Collections.Generic.JsStack`1.Push(`0[])">
            <summary>
            Appends new elements to an array, and returns the new length of the array.
            </summary>
            <param name="items">Optional. New elements of the Array.</param>
            <returns>The new length of the array.</returns>
        </member>
        <member name="M:System.Collections.Generic.JsStack`1.ToString">
            <summary>
            Returns a string representation of an array.
            </summary>
            <returns>The string representation of the array.</returns>
            <remarks>The elements of an Array are converted to strings. The
            resulting strings are concatenated and separated by commas.</remarks>
        </member>
        <member name="T:System.JsConsole">
            <summary>
            Provides the metadata for the window.console object.
            NOTE-jrockwood-2015-08-14: The console object is still not part of any standard. However,
            all modern browsers support it. I'm providing the metadata that is shared across Chrome, IE,
            Safari, and Firefox and not any metadata that is proprietary to a specific browser.
            </summary>
            <remarks>
            Support Matrix - <see href="http://caniuse.com/#feat=console-basic"/>
            Chrome - <see href="https://developer.chrome.com/devtools/docs/console-api"/>
            Firefox - <see href="https://developer.mozilla.org/en-US/docs/Web/API/Console"/>
            IE - <see href="https://msdn.microsoft.com/en-us/library/gg589530(v=vs.85).aspx"/>
            Safari = <see href="https://developer.apple.com/library/safari/documentation/AppleApplications/Conceptual/Safari_Developer_Guide/Console/Console.html"/>
            </remarks>
        </member>
        <member name="M:System.JsConsole.Assert(System.Boolean,System.String,System.Object[])">
            <summary>
            Writes an error message to the console if the assertion is false. If the assertion is
            true, nothing will happen.
            </summary>
            <param name="expression">
            Any boolean expression. If the assertion is false, the message will get written to the console.
            </param>
            <param name="msg">A JavaScript string containing zero or more substitution strings.</param>
            <param name="substitutions">
            JavaScript objects with which to replace substitution strings within msg. This gives you
            additional control over the format of the output.
            </param>
        </member>
        <member name="M:System.JsConsole.Assert(System.Boolean,System.Object,System.Object[])">
            <summary>
            Writes an error message to the console if the assertion is false. If the assertion is
            true, nothing will happen.
            </summary>
            <param name="expression">
            Any boolean expression. If the assertion is false, the message will get written to the console.
            </param>
            <param name="obj1">
            The first JavaScript object to output. The string representations of each of these
            objects are appended together in the order listed and output.
            </param>
            <param name="objects">
            A list of JavaScript objects to output. The string representations of each of these
            objects are appended together in the order listed and output.
            </param>
        </member>
        <member name="M:System.JsConsole.Clear">
            <summary>
            Clears the console. NOT SUPPORTED IN FIREFOX.
            </summary>
        </member>
        <member name="M:System.JsConsole.Count">
            <summary>
            Logs the number of times that this particular call to count() has been called.
            </summary>
        </member>
        <member name="M:System.JsConsole.Count(System.String)">
            <summary>
            Logs the number of times that this particular call to count() has been called.
            </summary>
            <param name="label">Optional label to prepend to the console message.</param>
        </member>
        <member name="M:System.JsConsole.Debug(System.Object,System.Object[])">
            <summary>
            Outputs a message to the console.
            </summary>
            <param name="obj1">
            The first JavaScript object to output. The string representations of each of these
            objects are appended together in the order listed and output.
            </param>
            <param name="objects">
            A list of JavaScript objects to output. The string representations of each of these
            objects are appended together in the order listed and output.
            </param>
        </member>
        <member name="M:System.JsConsole.Debug(System.String,System.Object[])">
            <summary>
            Outputs a message to the console.
            </summary>
            <param name="msg">A JavaScript string containing zero or more substitution strings.</param>
            <param name="substitutions">
            JavaScript objects with which to replace substitution strings within msg. This gives you
            additional control over the format of the output.
            </param>
        </member>
        <member name="M:System.JsConsole.Dir(System.Object)">
            <summary>
            Displays an interactive list of the properties of the specified JavaScript object. The
            output is presented as a hierarchical listing with disclosure triangles that let you see
            the contents of child objects.
            </summary>
            <param name="obj">A JavaScript object whose properties should be output.</param>
        </member>
        <member name="M:System.JsConsole.DirXml(System.Object)">
            <summary>
            Displays an interactive tree of the descendant elements of the specified XML/HTML
            element if possible or the JavaScript Object view if it is not. The output is presented
            as a hierarchical listing of expandable nodes that let you see the contents of child
            nodes. NOT AVAILABLE IN FIREFOX.
            </summary>
            <param name="node">A JavaScript object whose properties should be output.</param>
        </member>
        <member name="M:System.JsConsole.Error(System.Object,System.Object[])">
            <summary>
            Outputs an error message to the console. Chrome also includes a stack trace.
            </summary>
            <param name="obj1">
            The first JavaScript object to output. The string representations of each of these
            objects are appended together in the order listed and output.
            </param>
            <param name="objects">
            A list of JavaScript objects to output. The string representations of each of these
            objects are appended together in the order listed and output.
            </param>
        </member>
        <member name="M:System.JsConsole.Error(System.String,System.Object[])">
            <summary>
            Outputs an error message to the console. Chrome also includes a stack trace.
            </summary>
            <param name="msg">A JavaScript string containing zero or more substitution strings.</param>
            <param name="substitutions">
            JavaScript objects with which to replace substitution strings within msg. This gives you
            additional control over the format of the output.
            </param>
        </member>
        <member name="M:System.JsConsole.Group">
            <summary>
            Creates a new inline group in the Web Console log. This indents all following output by
            an additional level, until <see cref="M:System.JsConsole.GroupEnd"/> is called. NOT SUPPORTED IN IE.
            </summary>
        </member>
        <member name="M:System.JsConsole.Group(System.Object,System.Object[])">
            <summary>
            Creates a new inline group in the Web Console log. This indents all following output by
            an additional level, until <see cref="M:System.JsConsole.GroupEnd"/> is called. NOT SUPPORTED IN IE.
            </summary>
            <param name="obj1">
            The first JavaScript object to output. The string representations of each of these
            objects are appended together in the order listed and output.
            </param>
            <param name="objects">
            A list of JavaScript objects to output. The string representations of each of these
            objects are appended together in the order listed and output.
            </param>
        </member>
        <member name="M:System.JsConsole.Group(System.String,System.Object[])">
            <summary>
            Creates a new inline group in the Web Console log. This indents all following output by
            an additional level, until <see cref="M:System.JsConsole.GroupEnd"/> is called. NOT SUPPORTED IN IE&lt;11.
            </summary>
            <param name="msg">A JavaScript string containing zero or more substitution strings.</param>
            <param name="substitutions">
            JavaScript objects with which to replace substitution strings within msg. This gives you
            additional control over the format of the output.
            </param>
        </member>
        <member name="M:System.JsConsole.GroupCollapsed">
            <summary>
            Creates a new inline group in the Web Console log. This indents all following output by
            an additional level, until <see cref="M:System.JsConsole.GroupEnd"/> is called. NOT SUPPORTED IN IE&lt;11.
            </summary>
        </member>
        <member name="M:System.JsConsole.GroupCollapsed(System.Object,System.Object[])">
            <summary>
            Creates a new inline group in the Web Console log. This indents all following output by
            an additional level, until <see cref="M:System.JsConsole.GroupEnd"/> is called. NOT SUPPORTED IN IE&lt;11.
            </summary>
            <param name="obj1">
            The first JavaScript object to output. The string representations of each of these
            objects are appended together in the order listed and output.
            </param>
            <param name="objects">
            A list of JavaScript objects to output. The string representations of each of these
            objects are appended together in the order listed and output.
            </param>
        </member>
        <member name="M:System.JsConsole.GroupCollapsed(System.String,System.Object[])">
            <summary>
            Creates a new inline group in the Web Console log. This indents all following output by
            an additional level, until <see cref="M:System.JsConsole.GroupEnd"/> is called. NOT SUPPORTED IN IE&lt;11.
            </summary>
            <param name="msg">A JavaScript string containing zero or more substitution strings.</param>
            <param name="substitutions">
            JavaScript objects with which to replace substitution strings within msg. This gives you
            additional control over the format of the output.
            </param>
        </member>
        <member name="M:System.JsConsole.GroupEnd">
            <summary>
            Closes the most recently created logging group that previously created with <see
            cref="M:System.JsConsole.Group(System.String,System.Object[])"/> or <see cref="M:System.JsConsole.GroupCollapsed(System.String,System.Object[])"/>.
            NOT SUPPORTED IN IE&lt;11.
            </summary>
        </member>
        <member name="M:System.JsConsole.Info(System.Object,System.Object[])">
            <summary>
            Outputs an informational message to the console.
            </summary>
            <param name="obj1">
            The first JavaScript object to output. The string representations of each of these
            objects are appended together in the order listed and output.
            </param>
            <param name="objects">
            A list of JavaScript objects to output. The string representations of each of these
            objects are appended together in the order listed and output.
            </param>
        </member>
        <member name="M:System.JsConsole.Info(System.String,System.Object[])">
            <summary>
            Outputs an informational message to the console.
            </summary>
            <param name="msg">A JavaScript string containing zero or more substitution strings.</param>
            <param name="substitutions">
            JavaScript objects with which to replace substitution strings within msg. This gives you
            additional control over the format of the output.
            </param>
        </member>
        <member name="M:System.JsConsole.Log(System.Object,System.Object[])">
            <summary>
            Outputs a message to the console.
            </summary>
            <param name="obj1">
            The first JavaScript object to output. The string representations of each of these
            objects are appended together in the order listed and output.
            </param>
            <param name="objects">
            A list of JavaScript objects to output. The string representations of each of these
            objects are appended together in the order listed and output.
            </param>
        </member>
        <member name="M:System.JsConsole.Log(System.String,System.Object[])">
            <summary>
            Outputs a message to the console.
            </summary>
            <param name="msg">A JavaScript string containing zero or more substitution strings.</param>
            <param name="substitutions">
            JavaScript objects with which to replace substitution strings within msg. This gives you
            additional control over the format of the output.
            </param>
        </member>
        <member name="M:System.JsConsole.Profile">
            <summary>
            Starts recording a performance profile. You can optionally supply an argument to name
            the profile and this then enables you to stop only that profile if multiple profiles
            being recorded. To stop recording call <see cref="M:System.JsConsole.ProfileEnd"/>.
            </summary>
        </member>
        <member name="M:System.JsConsole.Profile(System.String)">
            <summary>
            Starts recording a performance profile. You can optionally supply an argument to name
            the profile and this then enables you to stop only that profile if multiple profiles
            being recorded. See <see cref="M:System.JsConsole.ProfileEnd"/> to see how this argument is interpreted. To
            stop recording call <see cref="M:System.JsConsole.ProfileEnd"/>.
            </summary>
            <param name="profileName">The name to give the profile. Optional.</param>
        </member>
        <member name="M:System.JsConsole.ProfileEnd">
            <summary>
            The profileEnd method stops recording a profile previously started with <see
            cref="M:System.JsConsole.Profile"/>. You can optionally supply an argument to name the profile. Doing so
            enables you to stop only that profile if you have multiple profiles being recorded.
            <list type="bullet">
            <item><description>if <see cref="M:System.JsConsole.ProfileEnd"/> is passed a profile name, and it matches
            the name of a profile being recorded, then that profile is stopped.</description></item>
            <item><description>if <see cref="M:System.JsConsole.ProfileEnd"/> is passed a profile name and it does not
            match the name of a profile being recorded, no changes will be made.</description></item>
            <item><description>if <see cref="M:System.JsConsole.ProfileEnd"/> is not passed a profile name, the most
            recently started profile is stopped.</description></item></list>
            </summary>
        </member>
        <member name="M:System.JsConsole.ProfileEnd(System.String)">
            <summary>
            The profileEnd method stops recording a profile previously started with <see
            cref="M:System.JsConsole.Profile"/>. You can optionally supply an argument to name the profile. Doing so
            enables you to stop only that profile if you have multiple profiles being recorded.
            THIS VERSION WITH A PROFILENAME IS ONLY SUPPORTED IN FIREFOX.
            <list type="bullet">
            <item><description>if <see cref="M:System.JsConsole.ProfileEnd"/> is passed a profile name, and it matches
            the name of a profile being recorded, then that profile is stopped.</description></item>
            <item><description>if <see cref="M:System.JsConsole.ProfileEnd"/> is passed a profile name and it does not
            match the name of a profile being recorded, no changes will be made.</description></item>
            <item><description>if <see cref="M:System.JsConsole.ProfileEnd"/> is not passed a profile name, the most
            recently started profile is stopped.</description></item></list>
            </summary>
            <param name="profileName">The name to give the profile. Optional.</param>
        </member>
        <member name="M:System.JsConsole.Time(System.String)">
            <summary>
            Starts a timer you can use to track how long an operation takes. You give each timer a
            unique name, and may have up to 10,000 timers running on a given page. When you call
            <see cref="M:System.JsConsole.TimeEnd(System.String)"/> with the same name, the browser will output the time, in
            milliseconds, that elapsed since the timer was started. NOT SUPPORTED IN IE&lt;11.
            </summary>
            <param name="timerName">
            The name to give the new timer. This will identify the timer; use the same name when
            calling <see cref="M:System.JsConsole.TimeEnd(System.String)"/> to stop the timer and get the time output to the console.
            </param>
        </member>
        <member name="M:System.JsConsole.TimeEnd(System.String)">
            <summary>
            Stops a timer that was previously started by calling. NOT SUPPORTED IN IE&lt;11.
            </summary>
            <param name="timerName">The name of the timer to stop.</param>
        </member>
        <member name="M:System.JsConsole.TimeStamp(System.String)">
            <summary>
            Marks the browser timeline with an event.
            https://developer.mozilla.org/en-US/docs/Web/API/Console/timeStamp
            </summary>
            <param name="eventName">
            The name to give to the mark on the timeline
            </param>
        </member>
        <member name="M:System.JsConsole.Trace">
            <summary>
            Outputs a stack trace. NOT SUPPORTED IN IE&lt;11.
            </summary>
        </member>
        <member name="M:System.JsConsole.Warn(System.Object,System.Object[])">
            <summary>
            Outputs a warning message to the console.
            </summary>
            <param name="obj1">
            The first JavaScript object to output. The string representations of each of these
            objects are appended together in the order listed and output.
            </param>
            <param name="objects">
            A list of JavaScript objects to output. The string representations of each of these
            objects are appended together in the order listed and output.
            </param>
        </member>
        <member name="M:System.JsConsole.Warn(System.String,System.Object[])">
            <summary>
            Outputs a warning message to the console.
            </summary>
            <param name="msg">A JavaScript string containing zero or more substitution strings.</param>
            <param name="substitutions">
            JavaScript objects with which to replace substitution strings within msg. This gives you
            additional control over the format of the output.
            </param>
        </member>
        <member name="M:System.JsNativeExtensionMethods.ReinterpretAs``1(System.Object)">
            <summary>
            Performs an "unsafe" cast, which lets you cast from one object to any
            other object. USE WITH CAUTION! This is the same as Script.Reinterpret
            except it allows for chaining syntax, which is easier to read.
            </summary>
            <typeparam name="T">The type to cast to.</typeparam>
            <param name="obj">Any object.</param>
            <remarks>
            Usage:
            <code>myObject.As&lt;OtherType&gt;().ContinueTheChain()</code>
            </remarks>
        </member>
        <member name="M:System.JsNativeExtensionMethods.Defer(System.Action,System.Int32)">
            <summary>
            Same thing as window.setTimeout(action, 0), but with a nicer syntax.
            </summary>
        </member>
        <member name="M:System.NamedValuesEnumExtensions.AsString(System.Enum)">
            <summary>
            For non-const <see cref="T:System.Runtime.CompilerServices.NamedValuesAttribute">[NamedValues]</see> enums only!
            Returns the same value as <see cref="M:System.Object.ToString">enum.ToString()</see>, but with no runtime penalty.
            Exactly equivalent to extension method <see cref="T:System.JsNativeExtensionMethods">Reinterpret&lt;string&gt;()</see>,
            but more typesafe as long as <see cref="T:System.Runtime.CompilerServices.NamedValuesAttribute">[NamedValues]</see> attribute
            (which compiles an enum to string) is present and the enum is not const
            (<a href="https://mytableau.tableaucorp.com/display/devprocess/Saltarelle+Port+Notes#SaltarellePortNotes-Bugs">Saltarelle bug</a>)
            </summary>
        </member>
        <member name="T:System.JsNumber">
            <summary>
            This is a type-safe wrapper around a native JavaScript Number that has
            no dependencies on mscorlib or any other 3rd party library.
            </summary>
        </member>
        <member name="P:System.JsNumber.MaxValue">
            <summary>
            Returns the largest number possible in JavaScript.
            </summary>
        </member>
        <member name="P:System.JsNumber.MinValue">
            <summary>
            Returns the smallest number possible in JavaScript.
            </summary>
        </member>
        <member name="P:System.JsNumber.NegativeInfinity">
            <summary>
            Represents negative infinity (returned on overflow).
            </summary>
        </member>
        <member name="P:System.JsNumber.NaN">
            <summary>
            Represents a "Not-a-Number" value.s
            </summary>
        </member>
        <member name="P:System.JsNumber.PositiveInfinity">
            <summary>
            Represents infinity (returned on overflow).
            </summary>
        </member>
        <member name="M:System.JsNumber.ToExponential">
            <summary>
            Converts a number into an exponential notation.
            </summary>
            <returns>The number as an exponential notation.</returns>
        </member>
        <member name="M:System.JsNumber.ToExponential(System.Int32)">
            <summary>
            Converts a number into an exponential notation.
            </summary>
            <param name="digitsAfterDecimal">Optional. An integer between 0 and 20 representing the number of digits in
            the notation after the decimal point. If omitted, it is set to as many digits as necessary to represent the
            value.</param>
            <returns>The number as an exponential notation.</returns>
        </member>
        <member name="M:System.JsNumber.ToFixed">
            <summary>
            Converts a number into a string, keeping a specified number of decimals.
            </summary>
            <returns>The number, with the exact number of decimals.</returns>
        </member>
        <member name="M:System.JsNumber.ToFixed(System.Int32)">
            <summary>
            Converts a number into a string, keeping a specified number of decimals.
            </summary>
            <param name="digitsAfterDecimal">Optional. The number of digits after the decimal point. Default is 0 (no
            digits after the decimal point).</param>
            <returns>The number, with the exact number of decimals.</returns>
        </member>
        <member name="M:System.JsNumber.ToPrecision">
            <summary>
            Formats a number to a specified length.
            </summary>
            <returns>The number formatted to the specified precision.</returns>
        </member>
        <member name="M:System.JsNumber.ToPrecision(System.Int32)">
            <summary>
            Formats a number to a specified length.
            </summary>
            <param name="numberOfDigits">Optional. The number of digits. If omitted, it returns the entire number
            (without any formatting).</param>
            <returns>The number formatted to the specified precision.</returns>
        </member>
        <member name="T:System.OnPopStateEventArgument`1">
            <summary>
            The type representation of the event argument of the WindowEventHandlers.onpopstate
            https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate
            </summary>
            <typeparam name="T">Type of the state object</typeparam>
        </member>
    </members>
</doc>
